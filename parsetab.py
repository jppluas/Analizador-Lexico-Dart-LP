
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ASSIGN BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXTENDS FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL IDENTIFIER IF IMPLEMENTS IN INLINE_ARITH INTEGER INTEGER_TYPE LBRACE LESS LESS_EQUAL LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETURN RPAREN RSQUARE SEMICOLON SET_TYPE STRING STRING_TYPE SWITCH THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE ZERO\n    statement : expression\n              | assignment\n              | print\n              | function\n              | if_statement\n              | while_statement\n              | for_statement\n              | lines\n              | LBRACE lines RBRACE\n              | reassignment\n              | \n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression\n                    | string_assignment\n                    | list_assigment\n                    | map_assigment\n      int_assignment :  number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type IDENTIFIER ASSIGN arithmetic\n                    | modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    \n      string_assignment : type_string IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string IDENTIFIER ASSIGN concate\n                    | modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | modifier type_string IDENTIFIER ASSIGN concate SEMICOLON\n                  \n     number_type : INTEGER_TYPE\n                        | VAR\n                        | DOUBLE_TYPE\n     type_string : STRING_TYPE\n                    | VAR\n    \n        reassignment : IDENTIFIER ASSIGN expression SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number SEMICOLON\n                     | IDENTIFIER INLINE_ARITH SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number\n                     | IDENTIFIER INLINE_ARITH\n     nullable : QUESTION_MARK\n     modifier : FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN values RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN values RPAREN\n                    | IDENTIFIER LPAREN RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n            | VOID\n\n      expression : arithmetic\n                    | concate\n                    | logic\n                    | function_call\n                    | division\n     arithmetic : number\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n        \n    \n    division : number DIVIDE number\n     concate : string\n        |   concate PLUS concate\n        |   LPAREN concate PLUS concate RPAREN\n     comparison : values\n        |   boolean\n        |   comparison comp_op comparison\n        |   LPAREN comparison comp_op number comparison\n        | int_comparison\n        |   string_comparison\n     int_comparison : boolean\n        |   number comp_op number\n        |   LPAREN number comp_op number RPAREN\n     string_comparison : boolean\n        |   string comp_op string\n        |   LPAREN string comp_op string RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n     list_assigment : IDENTIFIER ASSIGN list SEMICOLON\n                | type ASSIGN list SEMICOLON\n\n\n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK lines\n            | line lines\n            | line\n            | LINE_BREAK\n            |\n\n     line : print\n            | assignment\n            | function\n            | if_statement\n            | while_statement\n            | for_statement\n            | function_call\n            | reassignment\n            \n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n            | IDENTIFIER \n  \n    map : MAP_TYPE LESS type COMMA type GREATER\n        | MAP_TYPE\n    \n    map_assigment : map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON\n                |   map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON\n                |   IDENTIFIER IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON\n                |   IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON\n    map_values : type COLON type\n                 |  type COLON type COMMA map_values\n    \n    set : SET_TYPE LESS type GREATER\n        | SET_TYPE LESS type GREATER LSQUARE values RSQUARE\n        | SET_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    queue : QUEUE_TYPE LESS type GREATER\n          | QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE\n          | QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    while_statement : WHILE LPAREN logic RPAREN LBRACE lines RBRACE\n    \n    for_statement : FOR LPAREN assignment logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE\n    '
    
_lr_action_items = {'LBRACE':([0,62,89,146,182,213,214,217,231,281,],[10,129,150,198,222,244,245,150,260,286,]),'$end':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,19,20,21,22,28,29,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,103,104,115,117,118,124,126,127,128,130,131,132,134,135,137,147,151,152,153,155,169,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,279,280,283,284,289,],[-11,0,-1,-2,-3,-4,-5,-6,-7,-8,-10,-68,-69,-70,-71,-72,-109,-17,-18,-19,-125,-126,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,-126,-124,-95,-110,-111,-118,-110,-111,-50,-9,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-123,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,-157,]),'PRINT':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[23,-129,-128,-130,-131,-132,-133,23,-135,-68,-69,-70,-134,-72,-17,-18,-19,23,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,23,-95,-110,-111,-118,-110,-111,-50,23,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,23,23,-27,-14,-33,-13,23,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,23,-157,]),'IF':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,62,64,65,66,67,68,69,70,71,90,99,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[25,-129,-128,-130,-131,-132,-133,25,-135,-68,-69,-70,-134,-72,-17,-18,-19,25,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,25,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,25,-95,-110,-111,-118,-110,-111,-50,25,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,25,25,-27,-14,-33,-13,25,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,25,-157,]),'WHILE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[26,-129,-128,-130,-131,-132,-133,26,-135,-68,-69,-70,-134,-72,-17,-18,-19,26,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,26,-95,-110,-111,-118,-110,-111,-50,26,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,26,26,-27,-14,-33,-13,26,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,26,-157,]),'FOR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[27,-129,-128,-130,-131,-132,-133,27,-135,-68,-69,-70,-134,-72,-17,-18,-19,27,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,27,-95,-110,-111,-118,-110,-111,-50,27,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,27,27,-27,-14,-33,-13,27,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,27,-157,]),'LINE_BREAK':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[29,-129,-128,-130,-131,-132,-133,29,-135,-68,-69,-70,-134,-72,-17,-18,-19,103,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,29,-95,-110,-111,-118,-110,-111,-50,29,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,29,29,-27,-14,-33,-13,29,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,29,-157,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,18,19,20,21,22,24,28,30,31,32,33,34,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,64,65,66,67,68,69,70,71,72,78,79,80,81,82,83,84,87,89,90,91,92,99,100,101,102,103,107,108,109,110,111,112,114,115,116,117,118,121,123,124,126,127,128,129,131,132,134,135,137,138,140,143,144,147,151,152,153,155,160,161,166,167,168,170,171,172,173,174,178,179,183,184,187,190,191,192,195,197,199,200,202,203,204,206,210,220,223,224,229,232,235,236,237,238,239,240,241,242,243,244,245,246,249,255,258,259,260,268,269,270,271,273,274,275,277,279,280,282,283,284,286,289,],[19,-129,-128,-130,-131,-132,-133,72,-135,-68,-69,-70,-134,-72,85,88,-17,-18,-19,99,72,-73,-77,-92,99,-80,-56,-57,-58,-59,-37,-61,-38,-63,-64,-65,-66,-67,120,-112,122,-113,-114,-115,-81,-84,-85,-107,-116,-117,99,-128,-129,-130,-131,-132,-133,-134,-135,88,99,-96,-97,139,141,-64,142,-44,147,-43,99,147,-109,99,99,168,72,-101,-102,-103,-104,-105,-106,99,-95,99,-110,-111,181,99,-118,-110,-111,-50,72,-74,-73,-78,-77,-93,186,188,147,193,-109,-71,-42,-41,-55,99,99,99,216,88,-76,-87,-90,-82,99,-60,-62,-108,-119,147,147,-16,230,-67,-121,-39,-120,-40,-53,-54,-48,99,-28,-51,147,-15,193,-147,-52,-47,-75,-79,-94,-83,-88,-91,72,72,267,-27,-14,-33,-13,72,-142,-30,-32,-144,-12,-29,-31,-146,-49,-156,147,-145,-122,72,-157,]),'LPAREN':([0,12,13,14,16,19,20,21,22,23,24,25,26,27,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,72,73,74,75,76,77,78,79,80,85,89,92,99,100,101,107,108,109,110,111,112,114,115,116,117,118,124,126,127,131,132,133,134,135,136,137,143,147,151,155,158,159,160,161,166,170,171,172,173,174,180,183,184,187,189,190,191,197,200,203,204,210,220,221,224,226,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[24,-68,-69,-70,-72,91,-17,-18,-19,92,24,100,101,102,-73,-77,-92,116,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,91,133,-98,-99,-100,136,116,-96,-97,144,24,24,-109,116,116,-101,-102,-103,-104,-105,-106,174,-95,116,-110,-111,-118,-110,-111,-74,-73,133,-78,-77,136,-93,24,91,-71,-55,133,136,116,174,116,-76,-87,-90,-82,174,136,-108,-119,24,136,24,-16,-121,-120,-53,-54,174,-28,136,24,136,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,24,-145,]),'LOGICAL_NOT':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,78,79,80,89,92,99,100,101,115,116,117,118,124,126,127,131,132,134,135,137,143,147,151,155,160,166,170,171,172,173,183,184,187,190,191,197,200,203,204,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[33,-68,-69,-70,-72,-17,-18,-19,33,-73,-77,-92,33,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,33,-96,-97,33,33,-109,33,33,-95,33,-110,-111,-118,-110,-111,-74,-73,-78,-77,-93,33,-109,-71,-55,33,33,-76,-87,-90,-82,-108,-119,33,33,-16,-121,-120,-53,-54,-28,33,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,33,-145,]),'FINAL':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[35,-129,-128,-130,-131,-132,-133,35,-135,-68,-69,-70,-134,-72,-17,-18,-19,35,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,35,35,-95,-110,-111,-118,-110,-111,-50,35,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,35,35,-27,-14,-33,-13,35,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,35,-157,]),'CONST':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,34,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,124,126,127,128,129,131,132,134,135,137,147,151,152,153,155,170,171,172,173,183,184,191,197,199,200,202,203,204,206,220,223,229,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,269,270,271,273,274,275,277,279,280,283,284,286,289,],[36,-129,-128,-130,-131,-132,-133,36,-135,-68,-69,-70,-134,-72,-17,-18,-19,36,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,36,36,-95,-110,-111,-118,-110,-111,-50,36,-74,-73,-78,-77,-93,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,-39,-120,-40,-53,-54,-48,-28,-51,-15,-147,-52,-47,-75,-79,-94,-83,-88,-91,36,36,-27,-14,-33,-13,36,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,36,-157,]),'INTEGER_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[37,-129,-128,-130,-131,-132,-133,37,-135,-68,-69,-70,-134,-72,37,-17,-18,-19,37,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,37,37,-95,-110,-111,37,-118,-110,-111,-50,37,-74,-73,-78,-77,-93,37,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,37,-39,-120,-40,-53,-54,-48,37,-28,37,-51,-15,37,-147,-52,-47,-75,-79,-94,-83,-88,-91,37,37,-27,-14,-33,-13,37,37,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,37,37,-157,]),'DOUBLE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[38,-129,-128,-130,-131,-132,-133,38,-135,-68,-69,-70,-134,-72,38,-17,-18,-19,38,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,38,38,-95,-110,-111,38,-118,-110,-111,-50,38,-74,-73,-78,-77,-93,38,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,38,-39,-120,-40,-53,-54,-48,38,-28,38,-51,-15,38,-147,-52,-47,-75,-79,-94,-83,-88,-91,38,38,-27,-14,-33,-13,38,38,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,38,38,-157,]),'BOOLEAN_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[39,-129,-128,-130,-131,-132,-133,39,-135,-68,-69,-70,-134,-72,39,-17,-18,-19,39,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,39,39,-95,-110,-111,39,-118,-110,-111,-50,39,-74,-73,-78,-77,-93,39,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,39,-39,-120,-40,-53,-54,-48,39,-28,39,-51,-15,39,-147,-52,-47,-75,-79,-94,-83,-88,-91,39,39,-27,-14,-33,-13,39,39,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,39,39,-157,]),'QUEUE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[40,-129,-128,-130,-131,-132,-133,40,-135,-68,-69,-70,-134,-72,40,-17,-18,-19,40,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,40,40,-95,-110,-111,40,-118,-110,-111,-50,40,-74,-73,-78,-77,-93,40,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,40,-39,-120,-40,-53,-54,-48,40,-28,40,-51,-15,40,-147,-52,-47,-75,-79,-94,-83,-88,-91,40,40,-27,-14,-33,-13,40,40,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,40,40,-157,]),'STRING_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[41,-129,-128,-130,-131,-132,-133,41,-135,-68,-69,-70,-134,-72,41,-17,-18,-19,41,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,41,41,-95,-110,-111,178,-118,-110,-111,-50,41,-74,-73,-78,-77,-93,178,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,178,-39,-120,-40,-53,-54,-48,178,-28,178,-51,-15,178,-147,-52,-47,-75,-79,-94,-83,-88,-91,41,41,-27,-14,-33,-13,41,178,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,178,41,-157,]),'ENUM_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[42,-129,-128,-130,-131,-132,-133,42,-135,-68,-69,-70,-134,-72,42,-17,-18,-19,42,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,42,42,-95,-110,-111,42,-118,-110,-111,-50,42,-74,-73,-78,-77,-93,42,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,42,-39,-120,-40,-53,-54,-48,42,-28,42,-51,-15,42,-147,-52,-47,-75,-79,-94,-83,-88,-91,42,42,-27,-14,-33,-13,42,42,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,42,42,-157,]),'VAR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[43,-129,-128,-130,-131,-132,-133,43,-135,-68,-69,-70,-134,-72,43,-17,-18,-19,43,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,43,43,-95,-110,-111,179,-118,-110,-111,-50,43,-74,-73,-78,-77,-93,179,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,179,-39,-120,-40,-53,-54,-48,179,-28,179,-51,-15,179,-147,-52,-47,-75,-79,-94,-83,-88,-91,43,43,-27,-14,-33,-13,43,179,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,179,43,-157,]),'LIST_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[44,-129,-128,-130,-131,-132,-133,44,-135,-68,-69,-70,-134,-72,44,-17,-18,-19,44,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,44,44,-95,-110,-111,44,-118,-110,-111,-50,44,-74,-73,-78,-77,-93,44,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,44,-39,-120,-40,-53,-54,-48,44,-28,44,-51,-15,44,-147,-52,-47,-75,-79,-94,-83,-88,-91,44,44,-27,-14,-33,-13,44,44,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,44,44,-157,]),'MAP_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[45,-129,-128,-130,-131,-132,-133,45,-135,-68,-69,-70,-134,-72,83,-17,-18,-19,45,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,45,45,-95,-110,-111,83,-118,-110,-111,-50,45,-74,-73,-78,-77,-93,83,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,83,-39,-120,-40,-53,-54,-48,83,-28,83,-51,-15,83,-147,-52,-47,-75,-79,-94,-83,-88,-91,45,45,-27,-14,-33,-13,45,83,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,83,45,-157,]),'SET_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[46,-129,-128,-130,-131,-132,-133,46,-135,-68,-69,-70,-134,-72,46,-17,-18,-19,46,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,46,46,-95,-110,-111,46,-118,-110,-111,-50,46,-74,-73,-78,-77,-93,46,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,46,-39,-120,-40,-53,-54,-48,46,-28,46,-51,-15,46,-147,-52,-47,-75,-79,-94,-83,-88,-91,46,46,-27,-14,-33,-13,46,46,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,46,46,-157,]),'DYNAMIC_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[47,-129,-128,-130,-131,-132,-133,47,-135,-68,-69,-70,-134,-72,47,-17,-18,-19,47,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,47,47,-95,-110,-111,47,-118,-110,-111,-50,47,-74,-73,-78,-77,-93,47,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,47,-39,-120,-40,-53,-54,-48,47,-28,47,-51,-15,47,-147,-52,-47,-75,-79,-94,-83,-88,-91,47,47,-27,-14,-33,-13,47,47,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,47,47,-157,]),'VOID':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,36,50,52,53,54,55,56,57,58,59,60,64,65,66,67,68,69,70,71,90,99,102,103,115,117,118,119,124,126,127,128,129,131,132,134,135,137,144,147,151,152,153,155,170,171,172,173,183,184,191,197,198,199,200,202,203,204,206,219,220,222,223,229,232,235,236,237,238,239,240,241,242,243,244,245,249,255,258,259,260,263,269,270,271,273,274,275,277,279,280,283,284,285,286,289,],[48,-129,-128,-130,-131,-132,-133,48,-135,-68,-69,-70,-134,-72,48,-17,-18,-19,48,-73,-77,-92,-80,-45,-46,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-128,-129,-130,-131,-132,-133,-134,-135,-43,-109,48,48,-95,-110,-111,48,-118,-110,-111,-50,48,-74,-73,-78,-77,-93,195,-109,-71,-42,-41,-55,-76,-87,-90,-82,-108,-119,-16,-121,48,-39,-120,-40,-53,-54,-48,48,-28,48,-51,-15,195,-147,-52,-47,-75,-79,-94,-83,-88,-91,48,48,-27,-14,-33,-13,48,48,-30,-32,-144,-12,-29,-31,-146,-49,-156,-145,-122,48,48,-157,]),'INTEGER':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,61,73,74,75,76,78,79,80,89,90,91,92,99,100,101,105,106,107,108,109,110,111,112,114,115,116,117,118,123,124,126,127,131,132,133,134,135,137,143,147,151,155,158,160,161,162,166,170,171,172,173,174,183,184,187,190,191,197,200,203,204,210,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[52,-68,-69,-70,-72,-17,-18,-19,52,-73,-77,-92,52,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,52,52,-98,-99,-100,52,-96,-97,52,52,52,52,-109,52,52,52,52,-101,-102,-103,-104,-105,-106,52,-95,52,-110,-111,52,-118,-110,-111,-74,-73,52,-78,-77,-93,52,-109,-71,-55,52,52,52,52,52,-76,-87,-90,-82,52,-108,-119,52,52,-16,-121,-120,-53,-54,52,-28,52,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,52,-145,]),'DOUBLE':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,61,73,74,75,76,78,79,80,89,90,91,92,99,100,101,105,106,107,108,109,110,111,112,114,115,116,117,118,123,124,126,127,131,132,133,134,135,137,143,147,151,155,158,160,161,162,166,170,171,172,173,174,183,184,187,190,191,197,200,203,204,210,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[53,-68,-69,-70,-72,-17,-18,-19,53,-73,-77,-92,53,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,53,53,-98,-99,-100,53,-96,-97,53,53,53,53,-109,53,53,53,53,-101,-102,-103,-104,-105,-106,53,-95,53,-110,-111,53,-118,-110,-111,-74,-73,53,-78,-77,-93,53,-109,-71,-55,53,53,53,53,53,-76,-87,-90,-82,53,-108,-119,53,53,-16,-121,-120,-53,-54,53,-28,53,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,53,-145,]),'STRING':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,61,77,78,79,80,89,91,92,99,100,101,107,108,109,110,111,112,113,114,115,116,117,118,123,124,126,127,131,132,134,135,136,137,143,147,151,155,159,160,161,163,166,170,171,172,173,174,180,183,184,187,189,190,191,197,200,203,204,210,220,221,224,226,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[54,-68,-69,-70,-72,-17,-18,-19,54,-73,-77,-92,54,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,54,54,54,-96,-97,54,54,54,-109,54,54,-101,-102,-103,-104,-105,-106,54,54,-95,54,-110,-111,54,-118,-110,-111,-74,-73,-78,-77,54,-93,54,-109,-71,-55,54,54,54,54,54,-76,-87,-90,-82,54,54,-108,-119,54,54,54,-16,-121,-120,-53,-54,54,-28,54,54,54,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,54,-145,]),'TRUE':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,78,79,80,89,92,99,100,101,107,108,109,110,111,112,114,115,116,117,118,124,126,127,131,132,134,135,137,143,147,151,155,160,161,166,170,171,172,173,174,183,184,187,190,191,197,200,203,204,210,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[59,-68,-69,-70,-72,-17,-18,-19,59,-73,-77,-92,59,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,59,-96,-97,59,59,-109,59,59,-101,-102,-103,-104,-105,-106,59,-95,59,-110,-111,-118,-110,-111,-74,-73,-78,-77,-93,59,-109,-71,-55,59,59,59,-76,-87,-90,-82,59,-108,-119,59,59,-16,-121,-120,-53,-54,59,-28,59,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,59,-145,]),'FALSE':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,78,79,80,89,92,99,100,101,107,108,109,110,111,112,114,115,116,117,118,124,126,127,131,132,134,135,137,143,147,151,155,160,161,166,170,171,172,173,174,183,184,187,190,191,197,200,203,204,210,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[60,-68,-69,-70,-72,-17,-18,-19,60,-73,-77,-92,60,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,60,-96,-97,60,60,-109,60,60,-101,-102,-103,-104,-105,-106,60,-95,60,-110,-111,-118,-110,-111,-74,-73,-78,-77,-93,60,-109,-71,-55,60,60,60,-76,-87,-90,-82,60,-108,-119,60,60,-16,-121,-120,-53,-54,60,-28,60,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,60,-145,]),'LSQUARE':([0,12,13,14,16,20,21,22,24,30,31,32,33,34,50,52,53,54,55,56,57,58,59,60,61,78,79,80,86,89,91,92,99,100,101,107,108,109,110,111,112,114,115,116,117,118,123,124,126,127,131,132,134,135,137,143,147,151,155,160,161,166,170,171,172,173,174,183,184,187,190,191,197,200,203,204,210,217,220,224,229,235,236,238,239,240,241,242,243,249,255,258,259,269,270,271,273,274,275,277,282,283,],[61,-68,-69,-70,-72,-17,-18,-19,61,-73,-77,-92,61,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,61,61,-96,-97,61,61,61,61,-109,61,61,-101,-102,-103,-104,-105,-106,61,-95,61,-110,-111,61,-118,-110,-111,-74,-73,-78,-77,-93,61,-109,-71,-55,61,61,61,-76,-87,-90,-82,61,-108,-119,61,61,-16,-121,-120,-53,-54,61,61,-28,61,-15,-147,-52,-75,-79,-94,-83,-88,-91,-27,-14,-33,-13,-30,-32,-144,-12,-29,-31,-146,61,-145,]),'ELSE':([6,67,128,223,279,],[62,62,62,-51,-49,]),'RBRACE':([10,12,13,14,16,20,21,22,28,29,30,31,32,34,37,38,39,40,42,44,46,47,48,50,52,53,54,55,56,57,58,59,60,63,64,65,66,67,68,69,70,71,83,90,99,103,104,115,117,118,124,126,127,128,129,131,132,134,135,137,147,150,151,152,153,155,169,170,171,172,173,178,179,183,184,185,191,197,199,200,202,203,204,206,220,222,223,229,233,235,236,237,238,239,240,241,242,243,244,245,249,253,255,258,259,260,264,265,269,270,271,273,274,275,276,277,278,279,280,283,284,286,287,288,289,],[-127,-68,-69,-70,-72,-17,-18,-19,-125,-126,-73,-77,-92,-80,-56,-57,-58,-59,-61,-63,-65,-66,-67,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,130,-128,-129,-130,-131,-132,-133,-134,-135,-64,-43,-109,-126,-124,-95,-110,-111,-118,-110,-111,-50,-127,-74,-73,-78,-77,-93,-109,201,-71,-42,-41,-55,-123,-76,-87,-90,-82,-60,-62,-108,-119,223,-16,-121,-39,-120,-40,-53,-54,-48,-28,252,-51,-15,262,-147,-52,-47,-75,-79,-94,-83,-88,-91,-127,-127,-27,272,-14,-33,-13,-127,279,280,-30,-32,-144,-12,-29,-31,284,-146,-148,-49,-156,-145,-122,-127,-149,289,-157,]),'SEMICOLON':([12,13,14,16,30,31,32,34,50,52,53,54,55,56,57,58,59,60,90,99,115,117,118,124,126,127,131,132,134,135,137,145,147,148,149,151,152,155,157,170,171,172,173,183,184,191,201,203,204,205,215,220,225,227,228,236,238,239,240,241,242,243,247,250,251,252,254,256,257,262,272,],[-68,-69,-70,-72,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,153,-109,-95,-110,-111,-118,-110,-111,-74,-73,-78,-77,-93,197,-109,199,200,-71,202,204,206,-76,-87,-90,-82,-108,-119,229,235,236,-54,237,246,249,255,258,259,-52,-75,-79,-94,-83,-88,-91,200,269,270,271,273,274,275,277,283,]),'RPAREN':([12,13,14,16,30,31,32,34,50,52,53,54,55,56,57,58,59,60,90,91,92,99,115,117,118,124,126,127,131,132,134,135,137,144,147,151,152,153,154,155,156,164,165,170,171,172,173,183,184,193,194,195,196,199,202,203,204,207,208,209,211,212,230,232,236,238,239,240,241,242,243,261,266,],[-68,-69,-70,-72,-73,-77,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-43,155,157,-109,-95,-110,-111,-118,-110,-111,-74,-73,-78,-77,-93,-139,-109,-71,-42,-41,203,-55,205,213,214,-76,-87,-90,-82,-108,-119,-141,231,-136,-137,-39,-40,-53,-54,238,239,240,242,243,-140,-139,-52,-75,-79,-94,-83,-88,-91,-138,281,]),'PLUS':([12,13,30,31,52,53,54,93,94,97,98,131,132,134,135,207,208,220,227,238,239,251,257,],[74,77,-73,-77,-113,-114,-115,74,159,-73,-77,74,-73,77,-77,74,77,77,77,-75,-79,77,77,]),'MINUS':([12,30,52,53,93,97,131,132,207,238,],[75,-73,-113,-114,75,-73,75,-73,75,-75,]),'TIMES':([12,30,52,53,93,97,131,132,207,238,],[76,-73,-113,-114,76,-73,76,-73,76,-75,]),'LOGICAL_AND':([14,19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,95,96,97,98,99,115,117,118,124,126,127,137,147,149,164,165,171,172,173,175,176,183,184,209,210,211,212,215,240,241,242,243,],[79,-109,-110,-111,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,79,-92,-110,-111,-109,79,-110,-111,-118,-110,-111,79,-109,-112,79,79,-87,-90,-82,-110,-111,-108,-119,79,-110,-87,-90,79,-94,-83,-88,-91,]),'LOGICAL_OR':([14,19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,95,96,97,98,99,115,117,118,124,126,127,137,147,149,164,165,171,172,173,175,176,183,184,209,210,211,212,215,240,241,242,243,],[80,-109,-110,-111,-92,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,80,-92,-110,-111,-109,80,-110,-111,-118,-110,-111,80,-109,-112,80,80,-87,-90,-82,-110,-111,-108,-119,80,-110,-87,-90,80,-94,-83,-88,-91,]),'ASSIGN':([18,19,37,38,39,40,41,42,43,44,45,46,47,48,72,85,88,120,122,139,141,142,167,168,181,186,188,216,267,],[86,89,-56,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,89,143,146,180,182,187,189,190,86,217,221,224,226,143,282,]),'QUESTION_MARK':([18,37,38,39,40,41,42,43,44,45,46,47,48,49,81,82,83,167,],[87,-56,-57,-58,-59,-37,-61,-38,-63,-64,-65,-66,-67,87,87,87,-64,87,]),'INLINE_ARITH':([19,72,267,],[90,90,90,]),'COMMA':([19,30,31,37,38,39,40,42,44,46,47,48,50,52,53,54,58,83,97,98,99,117,118,124,126,127,147,149,175,176,177,178,179,184,193,196,210,230,278,],[-109,-110,-111,-56,-57,-58,-59,-61,-63,-65,-66,-67,-112,-113,-114,-115,123,-64,-110,-111,-109,-110,-111,-118,-110,-111,-109,-112,-110,-111,219,-60,-62,-119,-141,232,-110,-140,285,]),'EQUAL':([19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,183,184,210,211,212,218,241,242,243,],[-109,107,107,107,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,107,107,107,-109,107,107,-118,-110,-111,-109,-112,-87,-90,107,107,107,-108,-119,107,-87,-90,107,107,-88,-91,]),'NOT_EQUAL':([19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,183,184,210,211,212,218,241,242,243,],[-109,108,108,108,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,108,108,108,-109,108,108,-118,-110,-111,-109,-112,-87,-90,108,108,108,-108,-119,108,-87,-90,108,108,-88,-91,]),'LESS':([19,30,31,32,34,45,50,52,53,54,55,56,57,58,59,60,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,183,184,210,211,212,218,241,242,243,],[-109,109,109,109,-80,119,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,109,109,109,-109,109,109,-118,-110,-111,-109,-112,-87,-90,109,109,109,-108,-119,109,-87,-90,109,109,-88,-91,]),'LESS_EQUAL':([19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,183,184,210,211,212,218,241,242,243,],[-109,110,110,110,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,110,110,110,-109,110,110,-118,-110,-111,-109,-112,-87,-90,110,110,110,-108,-119,110,-87,-90,110,110,-88,-91,]),'GREATER':([19,30,31,32,34,37,38,39,40,42,44,46,47,48,50,52,53,54,55,56,57,58,59,60,83,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,178,179,183,184,210,211,212,218,241,242,243,248,],[-109,111,111,111,-80,-56,-57,-58,-59,-61,-63,-65,-66,-67,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,-64,111,111,111,-109,111,111,-118,-110,-111,-109,-112,-87,-90,111,111,111,-60,-62,-108,-119,111,-87,-90,111,111,-88,-91,268,]),'GREATER_EQUAL':([19,30,31,32,34,50,52,53,54,55,56,57,58,59,60,96,97,98,99,117,118,124,126,127,147,149,171,172,173,175,176,183,184,210,211,212,218,241,242,243,],[-109,112,112,112,-80,-112,-113,-114,-115,-81,-84,-85,-107,-116,-117,112,112,112,-109,112,112,-118,-110,-111,-109,-112,-87,-90,112,112,112,-108,-119,112,-87,-90,112,112,-88,-91,]),'DIVIDE':([30,52,53,],[105,-113,-114,]),'COLON':([37,38,39,40,42,44,46,47,48,83,178,179,234,],[-56,-57,-58,-59,-61,-63,-65,-66,-67,-64,-60,-62,263,]),'RSQUARE':([50,52,53,54,58,61,99,124,125,126,127,183,184,],[-112,-113,-114,-115,-107,124,-109,-118,184,-110,-111,-108,-119,]),'NULL':([221,226,],[250,256,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,89,92,143,187,190,224,282,],[2,148,156,191,225,228,254,148,]),'assignment':([0,10,28,102,103,129,244,245,260,286,],[3,65,65,166,65,65,65,65,65,65,]),'print':([0,10,28,103,129,244,245,260,286,],[4,64,64,64,64,64,64,64,64,]),'function':([0,10,28,103,129,244,245,260,286,],[5,66,66,66,66,66,66,66,66,]),'if_statement':([0,10,28,62,103,129,244,245,260,286,],[6,67,67,128,67,67,67,67,67,67,]),'while_statement':([0,10,28,103,129,244,245,260,286,],[7,68,68,68,68,68,68,68,68,]),'for_statement':([0,10,28,103,129,244,245,260,286,],[8,69,69,69,69,69,69,69,69,]),'lines':([0,10,28,103,129,244,245,260,286,],[9,63,104,169,185,264,265,276,288,]),'reassignment':([0,10,28,103,129,244,245,246,260,286,],[11,71,71,71,71,71,71,266,71,71,]),'arithmetic':([0,24,73,89,92,133,143,158,187,190,224,282,],[12,93,131,12,12,93,12,207,12,12,12,12,]),'concate':([0,24,77,89,92,136,143,159,180,187,189,190,221,224,226,282,],[13,94,134,13,13,94,13,208,220,13,227,13,251,13,257,13,]),'logic':([0,24,33,78,89,92,100,101,116,143,160,166,187,190,224,282,],[14,95,115,137,14,14,164,165,95,14,209,215,14,14,14,14,]),'function_call':([0,10,28,89,92,103,129,143,187,190,224,244,245,260,282,286,],[15,70,70,151,151,70,70,151,151,151,151,70,70,70,151,70,]),'division':([0,89,92,143,187,190,224,282,],[16,16,16,16,16,16,16,16,]),'modifier':([0,10,28,102,103,129,244,245,260,286,],[17,17,17,17,17,17,17,17,17,17,]),'type':([0,10,17,28,102,103,119,129,144,198,219,222,232,244,245,260,263,285,286,],[18,18,81,18,167,18,177,18,192,234,248,234,192,18,18,18,278,234,18,]),'string_assignment':([0,10,28,102,103,129,244,245,260,286,],[20,20,20,20,20,20,20,20,20,20,]),'list_assigment':([0,10,28,102,103,129,244,245,260,286,],[21,21,21,21,21,21,21,21,21,21,]),'map_assigment':([0,10,28,102,103,129,244,245,260,286,],[22,22,22,22,22,22,22,22,22,22,]),'line':([0,10,28,103,129,244,245,260,286,],[28,28,28,28,28,28,28,28,28,]),'number':([0,24,33,61,73,78,89,90,91,92,100,101,105,106,114,116,123,133,143,158,160,161,162,166,174,187,190,210,224,282,],[30,97,117,126,132,117,30,152,126,30,117,117,170,171,117,175,126,132,30,132,117,210,211,117,175,30,30,117,30,30,]),'string':([0,24,33,61,77,78,89,91,92,100,101,113,114,116,123,136,143,159,160,161,163,166,174,180,187,189,190,210,221,224,226,282,],[31,98,118,127,135,118,31,127,31,118,118,172,118,176,127,135,31,135,118,118,212,118,176,135,31,135,31,118,135,31,135,31,]),'comparison':([0,24,33,78,89,92,100,101,114,116,143,160,161,166,174,187,190,210,224,282,],[32,96,32,32,32,32,32,32,173,96,32,32,173,32,218,32,32,241,32,32,]),'values':([0,24,33,61,78,89,91,92,100,101,114,116,123,143,160,161,166,174,187,190,210,224,282,],[34,34,34,125,34,34,154,34,34,34,34,34,183,34,34,34,34,34,34,34,34,34,34,]),'type_string':([0,10,17,28,102,103,129,244,245,260,286,],[49,49,82,49,49,49,49,49,49,49,49,]),'list':([0,24,33,61,78,86,89,91,92,100,101,114,116,123,143,160,161,166,174,187,190,210,217,224,282,],[50,50,50,50,50,145,149,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,247,50,50,]),'map':([0,10,28,102,103,129,244,245,260,286,],[51,51,51,51,51,51,51,51,51,51,]),'boolean':([0,24,33,78,89,92,100,101,114,116,143,160,161,166,174,187,190,210,224,282,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'int_comparison':([0,24,33,78,89,92,100,101,114,116,143,160,161,166,174,187,190,210,224,282,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'string_comparison':([0,24,33,78,89,92,100,101,114,116,143,160,161,166,174,187,190,210,224,282,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'value':([0,24,33,61,78,89,91,92,100,101,114,116,123,143,160,161,166,174,187,190,210,224,282,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'arith_op':([12,93,131,207,],[73,158,73,73,]),'logic_op':([14,95,115,137,164,165,209,215,],[78,160,78,78,78,78,78,78,]),'nullable':([18,49,81,82,167,],[84,121,138,140,84,]),'comp_op':([30,31,32,96,97,98,117,118,173,175,176,210,218,241,],[106,113,114,161,162,163,106,113,114,162,163,106,161,114,]),'parameters':([144,232,],[194,261,]),'parameter':([144,232,],[196,196,]),'map_values':([198,222,285,],[233,253,287,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> while_statement','statement',1,'p_statement','sintactico.py',11),
  ('statement -> for_statement','statement',1,'p_statement','sintactico.py',12),
  ('statement -> lines','statement',1,'p_statement','sintactico.py',13),
  ('statement -> LBRACE lines RBRACE','statement',3,'p_statement','sintactico.py',14),
  ('statement -> reassignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',16),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',20),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',21),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',22),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',23),
  ('assignment -> type IDENTIFIER ASSIGN expression','assignment',4,'p_assignment','sintactico.py',24),
  ('assignment -> string_assignment','assignment',1,'p_assignment','sintactico.py',25),
  ('assignment -> list_assigment','assignment',1,'p_assignment','sintactico.py',26),
  ('assignment -> map_assigment','assignment',1,'p_assignment','sintactico.py',27),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',5,'p_int_assignment','sintactico.py',32),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic','int_assignment',4,'p_int_assignment','sintactico.py',33),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',34),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',35),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',36),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',37),
  ('int_assignment -> modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',38),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',5,'p_string_assignment','sintactico.py',44),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate','string_assignment',4,'p_string_assignment','sintactico.py',45),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',46),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',47),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',48),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',49),
  ('string_assignment -> modifier type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',50),
  ('number_type -> INTEGER_TYPE','number_type',1,'p_number_type','sintactico.py',55),
  ('number_type -> VAR','number_type',1,'p_number_type','sintactico.py',56),
  ('number_type -> DOUBLE_TYPE','number_type',1,'p_number_type','sintactico.py',57),
  ('type_string -> STRING_TYPE','type_string',1,'p_type_string','sintactico.py',61),
  ('type_string -> VAR','type_string',1,'p_type_string','sintactico.py',62),
  ('reassignment -> IDENTIFIER ASSIGN expression SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',67),
  ('reassignment -> IDENTIFIER INLINE_ARITH number SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',68),
  ('reassignment -> IDENTIFIER INLINE_ARITH SEMICOLON','reassignment',3,'p_reassignment','sintactico.py',69),
  ('reassignment -> IDENTIFIER INLINE_ARITH number','reassignment',3,'p_reassignment','sintactico.py',70),
  ('reassignment -> IDENTIFIER INLINE_ARITH','reassignment',2,'p_reassignment','sintactico.py',71),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',75),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',79),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',80),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',84),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',85),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',90),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',91),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',92),
  ('function_call -> IDENTIFIER LPAREN values RPAREN SEMICOLON','function_call',5,'p_function_call','sintactico.py',98),
  ('function_call -> IDENTIFIER LPAREN values RPAREN','function_call',4,'p_function_call','sintactico.py',99),
  ('function_call -> IDENTIFIER LPAREN RPAREN SEMICOLON','function_call',4,'p_function_call','sintactico.py',100),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','sintactico.py',101),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',105),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',106),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',107),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',108),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',109),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',110),
  ('type -> VAR','type',1,'p_type','sintactico.py',111),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',112),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',113),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',114),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',115),
  ('type -> VOID','type',1,'p_type','sintactico.py',116),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',121),
  ('expression -> concate','expression',1,'p_expression','sintactico.py',122),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',123),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',124),
  ('expression -> division','expression',1,'p_expression','sintactico.py',125),
  ('arithmetic -> number','arithmetic',1,'p_arithmetic','sintactico.py',130),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',131),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',132),
  ('division -> number DIVIDE number','division',3,'p_division','sintactico.py',139),
  ('concate -> string','concate',1,'p_concate','sintactico.py',143),
  ('concate -> concate PLUS concate','concate',3,'p_concate','sintactico.py',144),
  ('concate -> LPAREN concate PLUS concate RPAREN','concate',5,'p_concate','sintactico.py',145),
  ('comparison -> values','comparison',1,'p_comparison','sintactico.py',149),
  ('comparison -> boolean','comparison',1,'p_comparison','sintactico.py',150),
  ('comparison -> comparison comp_op comparison','comparison',3,'p_comparison','sintactico.py',151),
  ('comparison -> LPAREN comparison comp_op number comparison','comparison',5,'p_comparison','sintactico.py',152),
  ('comparison -> int_comparison','comparison',1,'p_comparison','sintactico.py',153),
  ('comparison -> string_comparison','comparison',1,'p_comparison','sintactico.py',154),
  ('int_comparison -> boolean','int_comparison',1,'p_int_comparison','sintactico.py',164),
  ('int_comparison -> number comp_op number','int_comparison',3,'p_int_comparison','sintactico.py',165),
  ('int_comparison -> LPAREN number comp_op number RPAREN','int_comparison',5,'p_int_comparison','sintactico.py',166),
  ('string_comparison -> boolean','string_comparison',1,'p_string_comparison','sintactico.py',171),
  ('string_comparison -> string comp_op string','string_comparison',3,'p_string_comparison','sintactico.py',172),
  ('string_comparison -> LPAREN string comp_op string RPAREN','string_comparison',5,'p_string_comparison','sintactico.py',173),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',176),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',177),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',178),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',179),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',183),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',184),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',188),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',189),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',190),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',195),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',196),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',197),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',198),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',199),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',200),
  ('values -> value','values',1,'p_values','sintactico.py',205),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',206),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',210),
  ('value -> number','value',1,'p_value','sintactico.py',211),
  ('value -> string','value',1,'p_value','sintactico.py',212),
  ('value -> list','value',1,'p_value','sintactico.py',213),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',217),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',218),
  ('string -> STRING','string',1,'p_string','sintactico.py',222),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',226),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',227),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',231),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',232),
  ('list_assigment -> IDENTIFIER ASSIGN list SEMICOLON','list_assigment',4,'p_list_assigment','sintactico.py',235),
  ('list_assigment -> type ASSIGN list SEMICOLON','list_assigment',4,'p_list_assigment','sintactico.py',236),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',242),
  ('lines -> line LINE_BREAK lines','lines',3,'p_lines','sintactico.py',246),
  ('lines -> line lines','lines',2,'p_lines','sintactico.py',247),
  ('lines -> line','lines',1,'p_lines','sintactico.py',248),
  ('lines -> LINE_BREAK','lines',1,'p_lines','sintactico.py',249),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',250),
  ('line -> print','line',1,'p_line','sintactico.py',255),
  ('line -> assignment','line',1,'p_line','sintactico.py',256),
  ('line -> function','line',1,'p_line','sintactico.py',257),
  ('line -> if_statement','line',1,'p_line','sintactico.py',258),
  ('line -> while_statement','line',1,'p_line','sintactico.py',259),
  ('line -> for_statement','line',1,'p_line','sintactico.py',260),
  ('line -> function_call','line',1,'p_line','sintactico.py',261),
  ('line -> reassignment','line',1,'p_line','sintactico.py',262),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',268),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',269),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',270),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',271),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',276),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','sintactico.py',277),
  ('map -> MAP_TYPE LESS type COMMA type GREATER','map',6,'p_map','sintactico.py',281),
  ('map -> MAP_TYPE','map',1,'p_map','sintactico.py',282),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON','map_assigment',6,'p_map_assignment','sintactico.py',286),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON','map_assigment',7,'p_map_assignment','sintactico.py',287),
  ('map_assigment -> IDENTIFIER IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON','map_assigment',7,'p_map_assignment','sintactico.py',288),
  ('map_assigment -> IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON','map_assigment',5,'p_map_assignment','sintactico.py',289),
  ('map_values -> type COLON type','map_values',3,'p_values_map','sintactico.py',292),
  ('map_values -> type COLON type COMMA map_values','map_values',5,'p_values_map','sintactico.py',293),
  ('set -> SET_TYPE LESS type GREATER','set',4,'p_set','sintactico.py',297),
  ('set -> SET_TYPE LESS type GREATER LSQUARE values RSQUARE','set',7,'p_set','sintactico.py',298),
  ('set -> SET_TYPE LESS type GREATER LSQUARE RSQUARE','set',6,'p_set','sintactico.py',299),
  ('queue -> QUEUE_TYPE LESS type GREATER','queue',4,'p_queue','sintactico.py',303),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE','queue',7,'p_queue','sintactico.py',304),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE','queue',6,'p_queue','sintactico.py',305),
  ('while_statement -> WHILE LPAREN logic RPAREN LBRACE lines RBRACE','while_statement',7,'p_while_statement','sintactico.py',309),
  ('for_statement -> FOR LPAREN assignment logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE','for_statement',10,'p_for_statement','sintactico.py',315),
]
