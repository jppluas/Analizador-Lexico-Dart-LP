
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AS ASSERT ASSIGN ASYNC AWAIT BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DEFERRED DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXPORT EXTENDS EXTENSION EXTERNAL FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL HIDE IDENTIFIER IF IMPLEMENTS IMPORT IN INTEGER INTEGER_TYPE INTERFACE IS KEYWORD LATE LBRACE LESS LESS_EQUAL LIBRARY LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL ON OPERATOR PART PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETHROW RETURN RPAREN RSQUARE SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUPER SWITCH SYNC THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE WITH YIELD\n statement : expression\n           | assignment\n           | print\n           | function\n           | if_statement\n           | lines\n           |\n   assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n     nullable : QUESTION_MARK\n     modifier : LATE\n                | FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN parameters RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n      expression : arithmetic\n                    | logic\n                    | function_call\n     arithmetic : value\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n     comparison : value\n        |   boolean\n        |   comparison comp_op comparison\n        |   LPAREN comparison comp_op comparison RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n        |   DIVIDE\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK\n            | line\n            | \n\n     line : print\n            | assignment\n            | function\n            | if_statement\n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n  '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,8,9,10,13,17,18,19,35,36,37,38,39,40,41,43,44,63,65,73,75,76,79,81,82,84,100,102,114,118,125,129,132,133,134,135,138,139,142,144,145,],[-7,0,-1,-2,-3,-4,-5,-6,-33,-34,-35,-61,-74,-36,-43,-62,-63,-64,-40,-65,-66,-67,-68,-69,-61,-73,-46,-39,-70,-19,-37,-36,-44,-41,-71,-21,-17,-20,-11,-16,-38,-45,-42,-10,-9,-8,-18,-72,]),'PRINT':([0,80,136,140,],[14,14,14,14,]),'IF':([0,45,80,136,140,],[16,16,16,16,16,]),'LPAREN':([0,13,14,15,16,20,46,47,48,49,50,51,52,53,56,59,64,66,67,68,69,70,71,72,74,83,88,96,97,98,101,110,111,126,],[15,58,59,15,64,74,83,-49,-50,-51,-52,74,-47,-48,89,15,74,101,-53,-54,-55,-56,-57,-58,74,83,15,83,74,101,101,15,15,15,]),'LOGICAL_NOT':([0,15,20,51,52,53,59,64,74,88,97,110,111,126,],[20,20,20,20,-47,-48,20,20,20,20,20,20,20,20,]),'IDENTIFIER':([0,12,15,20,24,25,26,27,28,29,30,31,32,33,34,42,46,47,48,49,50,51,52,53,54,55,57,59,64,66,67,68,69,70,71,72,74,83,85,88,93,96,97,98,101,103,110,111,126,],[13,56,63,63,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,63,63,-49,-50,-51,-52,63,-47,-48,86,87,-12,13,63,63,-53,-54,-55,-56,-57,-58,63,63,109,13,116,63,63,63,63,63,13,13,13,]),'LATE':([0,80,136,140,],[21,21,21,21,]),'FINAL':([0,80,136,140,],[22,22,22,22,]),'CONST':([0,80,136,140,],[23,23,23,23,]),'INTEGER_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[24,24,-13,-14,-15,24,24,24,24,24,24,]),'DOUBLE_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[25,25,-13,-14,-15,25,25,25,25,25,25,]),'BOOLEAN_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[26,26,-13,-14,-15,26,26,26,26,26,26,]),'QUEUE_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[27,27,-13,-14,-15,27,27,27,27,27,27,]),'STRING_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[28,28,-13,-14,-15,28,28,28,28,28,28,]),'ENUM_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[29,29,-13,-14,-15,29,29,29,29,29,29,]),'VAR':([0,11,21,22,23,58,80,89,115,136,140,],[30,30,-13,-14,-15,30,30,30,30,30,30,]),'LIST_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[31,31,-13,-14,-15,31,31,31,31,31,31,]),'MAP_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[32,32,-13,-14,-15,32,32,32,32,32,32,]),'SET_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[33,33,-13,-14,-15,33,33,33,33,33,33,]),'DYNAMIC_TYPE':([0,11,21,22,23,58,80,89,115,136,140,],[34,34,-13,-14,-15,34,34,34,34,34,34,]),'INTEGER':([0,15,20,42,46,47,48,49,50,51,52,53,59,64,66,67,68,69,70,71,72,74,83,88,96,97,98,101,103,110,111,126,],[39,39,39,39,39,-49,-50,-51,-52,39,-47,-48,39,39,39,-53,-54,-55,-56,-57,-58,39,39,39,39,39,39,39,39,39,39,39,]),'DOUBLE':([0,15,20,42,46,47,48,49,50,51,52,53,59,64,66,67,68,69,70,71,72,74,83,88,96,97,98,101,103,110,111,126,],[40,40,40,40,40,-49,-50,-51,-52,40,-47,-48,40,40,40,-53,-54,-55,-56,-57,-58,40,40,40,40,40,40,40,40,40,40,40,]),'STRING':([0,15,20,42,46,47,48,49,50,51,52,53,59,64,66,67,68,69,70,71,72,74,83,88,96,97,98,101,103,110,111,126,],[41,41,41,41,41,-49,-50,-51,-52,41,-47,-48,41,41,41,-53,-54,-55,-56,-57,-58,41,41,41,41,41,41,41,41,41,41,41,]),'LSQUARE':([0,15,20,42,46,47,48,49,50,51,52,53,59,64,66,67,68,69,70,71,72,74,83,88,96,97,98,101,103,110,111,126,],[42,42,42,42,42,-49,-50,-51,-52,42,-47,-48,42,42,42,-53,-54,-55,-56,-57,-58,42,42,42,42,42,42,42,42,42,42,42,]),'TRUE':([0,15,20,51,52,53,59,64,66,67,68,69,70,71,72,74,88,97,98,101,110,111,126,],[43,43,43,43,-47,-48,43,43,43,-53,-54,-55,-56,-57,-58,43,43,43,43,43,43,43,43,]),'FALSE':([0,15,20,51,52,53,59,64,66,67,68,69,70,71,72,74,88,97,98,101,110,111,126,],[44,44,44,44,-47,-48,44,44,44,-53,-54,-55,-56,-57,-58,44,44,44,44,44,44,44,44,]),'LINE_BREAK':([3,4,5,6,17,79,104,106,107,108,118,125,129,132,138,139,142,144,145,],[-77,-76,-78,-79,65,-19,-79,-76,-77,-78,-17,-20,-11,-16,-10,-9,-8,-18,-72,]),'ELSE':([6,79,104,125,144,],[45,45,45,-20,-18,]),'RPAREN':([8,9,10,13,18,19,35,36,37,38,39,40,41,43,44,58,59,63,73,75,76,81,82,84,89,90,91,92,94,99,100,102,113,114,115,116,119,120,121,131,133,134,135,],[-33,-34,-35,-61,-36,-43,-62,-63,-64,-40,-65,-66,-67,-68,-69,-83,95,-61,-46,-39,-70,-37,-36,-44,-83,114,-80,-81,117,122,-41,-71,130,-21,-83,-84,133,134,135,-82,-38,-45,-42,]),'SEMICOLON':([8,9,10,13,18,19,35,36,37,38,39,40,41,43,44,63,73,75,76,81,82,84,95,100,102,112,114,117,127,128,133,134,135,137,],[-33,-34,-35,-61,-36,-43,-62,-63,-64,-40,-65,-66,-67,-68,-69,-61,-46,-39,-70,-37,-36,-44,118,-41,-71,129,-21,132,138,139,-38,-45,-42,142,]),'PLUS':([8,13,18,35,36,37,39,40,41,60,63,76,81,82,102,119,133,],[47,-61,-36,-62,-63,-64,-65,-66,-67,47,-61,-70,47,-36,-71,47,-38,]),'MINUS':([8,13,18,35,36,37,39,40,41,60,63,76,81,82,102,119,133,],[48,-61,-36,-62,-63,-64,-65,-66,-67,48,-61,-70,48,-36,-71,48,-38,]),'TIMES':([8,13,18,35,36,37,39,40,41,60,63,76,81,82,102,119,133,],[49,-61,-36,-62,-63,-64,-65,-66,-67,49,-61,-70,49,-36,-71,49,-38,]),'DIVIDE':([8,13,18,35,36,37,39,40,41,60,63,76,81,82,102,119,133,],[50,-61,-36,-62,-63,-64,-65,-66,-67,50,-61,-70,50,-36,-71,50,-38,]),'LOGICAL_AND':([9,13,18,19,35,36,37,38,39,40,41,43,44,61,62,63,73,75,76,84,99,100,102,120,121,134,135,],[52,-61,-39,-43,-62,-63,-64,-40,-65,-66,-67,-68,-69,52,-43,-61,52,-39,-70,52,52,-41,-71,52,-41,-45,-42,]),'LOGICAL_OR':([9,13,18,19,35,36,37,38,39,40,41,43,44,61,62,63,73,75,76,84,99,100,102,120,121,134,135,],[53,-61,-39,-43,-62,-63,-64,-40,-65,-66,-67,-68,-69,53,-43,-61,53,-39,-70,53,53,-41,-71,53,-41,-45,-42,]),'QUESTION_MARK':([12,24,25,26,27,28,29,30,31,32,33,34,54,],[57,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,57,]),'EQUAL':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,67,-62,-63,-64,-40,-65,-66,-67,-68,-69,67,-61,-39,-70,67,-71,67,67,-42,]),'NOT_EQUAL':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,68,-62,-63,-64,-40,-65,-66,-67,-68,-69,68,-61,-39,-70,68,-71,68,68,-42,]),'LESS':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,69,-62,-63,-64,-40,-65,-66,-67,-68,-69,69,-61,-39,-70,69,-71,69,69,-42,]),'LESS_EQUAL':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,70,-62,-63,-64,-40,-65,-66,-67,-68,-69,70,-61,-39,-70,70,-71,70,70,-42,]),'GREATER':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,71,-62,-63,-64,-40,-65,-66,-67,-68,-69,71,-61,-39,-70,71,-71,71,71,-42,]),'GREATER_EQUAL':([13,18,19,35,36,37,38,39,40,41,43,44,62,63,75,76,100,102,121,123,135,],[-61,-39,72,-62,-63,-64,-40,-65,-66,-67,-68,-69,72,-61,-39,-70,72,-71,72,72,-42,]),'RBRACE':([17,65,79,80,104,105,106,107,108,118,125,129,132,136,138,139,140,141,142,143,144,145,],[-74,-73,-19,-75,-79,125,-76,-77,-78,-17,-20,-11,-16,-75,-10,-9,-75,144,-8,145,-18,-72,]),'COMMA':([35,36,37,39,40,41,63,76,78,92,102,116,],[-62,-63,-64,-65,-66,-67,-61,-70,103,115,-71,-84,]),'RSQUARE':([35,36,37,39,40,41,42,63,76,77,78,102,124,],[-62,-63,-64,-65,-66,-67,76,-61,-70,102,-59,-71,-60,]),'LBRACE':([45,122,130,],[80,136,140,]),'ASSIGN':([56,86,87,109,],[88,110,111,126,]),'VOID':([58,89,115,],[91,91,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,59,88,110,111,126,],[2,94,112,127,128,137,]),'assignment':([0,80,136,140,],[3,107,107,107,]),'print':([0,80,136,140,],[4,106,106,106,]),'function':([0,80,136,140,],[5,108,108,108,]),'if_statement':([0,45,80,136,140,],[6,79,104,104,104,]),'lines':([0,80,136,140,],[7,105,141,143,]),'arithmetic':([0,15,46,59,83,88,96,110,111,126,],[8,60,81,8,60,8,119,8,8,8,]),'logic':([0,15,20,51,59,64,74,88,97,110,111,126,],[9,61,73,84,9,99,61,9,120,9,9,9,]),'function_call':([0,59,88,110,111,126,],[10,10,10,10,10,10,]),'modifier':([0,80,136,140,],[11,11,11,11,]),'type':([0,11,58,80,89,115,136,140,],[12,54,93,12,93,93,12,12,]),'line':([0,80,136,140,],[17,17,17,17,]),'value':([0,15,20,42,46,51,59,64,66,74,83,88,96,97,98,101,103,110,111,126,],[18,18,75,78,82,75,18,75,75,75,82,18,82,75,75,75,78,18,18,18,]),'comparison':([0,15,20,51,59,64,66,74,88,97,98,101,110,111,126,],[19,62,19,19,19,19,100,62,19,19,121,123,19,19,19,]),'number':([0,15,20,42,46,51,59,64,66,74,83,88,96,97,98,101,103,110,111,126,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'string':([0,15,20,42,46,51,59,64,66,74,83,88,96,97,98,101,103,110,111,126,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'list':([0,15,20,42,46,51,59,64,66,74,83,88,96,97,98,101,103,110,111,126,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'boolean':([0,15,20,51,59,64,66,74,88,97,98,101,110,111,126,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'arith_op':([8,60,81,119,],[46,96,46,46,]),'logic_op':([9,61,73,84,99,120,],[51,97,51,51,51,51,]),'nullable':([12,54,],[55,85,]),'comp_op':([19,62,100,121,123,],[66,98,66,66,98,]),'values':([42,103,],[77,124,]),'parameters':([58,89,115,],[90,113,131,]),'parameter':([58,89,115,],[92,92,92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> lines','statement',1,'p_statement','sintactico.py',11),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',12),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',16),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',17),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',18),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',19),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',23),
  ('modifier -> LATE','modifier',1,'p_modifier','sintactico.py',27),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',28),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',29),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',33),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',34),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',39),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',40),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',41),
  ('function_call -> IDENTIFIER LPAREN parameters RPAREN','function_call',4,'p_function_call','sintactico.py',47),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',51),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',52),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',53),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',54),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',55),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',56),
  ('type -> VAR','type',1,'p_type','sintactico.py',57),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',58),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',59),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',60),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',61),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',65),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',66),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',67),
  ('arithmetic -> value','arithmetic',1,'p_arithmetic','sintactico.py',71),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',72),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',73),
  ('comparison -> value','comparison',1,'p_comparison','sintactico.py',77),
  ('comparison -> boolean','comparison',1,'p_comparison','sintactico.py',78),
  ('comparison -> comparison comp_op comparison','comparison',3,'p_comparison','sintactico.py',79),
  ('comparison -> LPAREN comparison comp_op comparison RPAREN','comparison',5,'p_comparison','sintactico.py',80),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',84),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',85),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',86),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',87),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',91),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',92),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',96),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',97),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',98),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','sintactico.py',99),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',104),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',105),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',106),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',107),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',108),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',109),
  ('values -> value','values',1,'p_values','sintactico.py',114),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',115),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',119),
  ('value -> number','value',1,'p_value','sintactico.py',120),
  ('value -> string','value',1,'p_value','sintactico.py',121),
  ('value -> list','value',1,'p_value','sintactico.py',122),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',126),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',127),
  ('string -> STRING','string',1,'p_string','sintactico.py',131),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',135),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',136),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',140),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',141),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',147),
  ('lines -> line LINE_BREAK','lines',2,'p_lines','sintactico.py',151),
  ('lines -> line','lines',1,'p_lines','sintactico.py',152),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',153),
  ('line -> print','line',1,'p_line','sintactico.py',158),
  ('line -> assignment','line',1,'p_line','sintactico.py',159),
  ('line -> function','line',1,'p_line','sintactico.py',160),
  ('line -> if_statement','line',1,'p_line','sintactico.py',161),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',166),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',167),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',168),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',169),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',174),
]
