
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ASSIGN BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXTENDS FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL IDENTIFIER IF IMPLEMENTS IN INLINE_ARITH INTEGER INTEGER_TYPE LATE LBRACE LESS LESS_EQUAL LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETURN RPAREN RSQUARE SEMICOLON SET SET_TYPE STRING STRING_TYPE SWITCH THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE ZERO\n    statement : concate\n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression\n    \n        reassignment : IDENTIFIER ASSIGN expression SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number SEMICOLON\n                     | IDENTIFIER INLINE_ARITH SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number\n                     | IDENTIFIER INLINE_ARITH\n     nullable : QUESTION_MARK\n     modifier : LATE\n                | FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN values RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN values RPAREN\n                    | IDENTIFIER LPAREN RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n            | VOID\n\n      expression : arithmetic\n                    | concate\n                    | logic\n                    | function_call\n                    | division\n     arithmetic : number\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n    \n    division : number DIVIDE number\n     concate : string PLUS string\n     comparison : value\n        |   boolean\n        |   comparison comp_op comparison\n        |   LPAREN comparison comp_op comparison RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK lines\n            | line lines\n            | line\n            | LINE_BREAK\n            |\n\n     line : print\n            | assignment\n            | function\n            | if_statement\n            | while_statement\n            | for_statement\n            | function_call\n            | reassignment\n            \n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n            | IDENTIFIER \n  \n    map : MAP_TYPE LESS type COMMA type GREATER\n        | MAP_TYPE LESS type COMMA type GREATER LSQUARE values RSQUARE\n        | MAP_TYPE LESS type COMMA type GREATER LSQUARE RSQUARE\n    \n    set : SET_TYPE LESS type GREATER\n        | SET_TYPE LESS type GREATER LSQUARE values RSQUARE\n        | SET_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    queue : QUEUE_TYPE LESS type GREATER\n          | QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE\n          | QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    while_statement : WHILE LPAREN logic RPAREN LBRACE lines RBRACE\n    \n    for_statement : FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE\n    '
    
_lr_action_items = {'STRING':([0,5,],[4,4,]),'$end':([1,2,4,6,],[0,-1,-74,-46,]),'PLUS':([3,4,],[5,-74,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'concate':([0,],[2,]),'string':([0,5,],[3,6,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> concate','statement',1,'p_statement','sintactico.py',6),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',9),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',10),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',11),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',12),
  ('assignment -> type IDENTIFIER ASSIGN expression','assignment',4,'p_assignment','sintactico.py',13),
  ('reassignment -> IDENTIFIER ASSIGN expression SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',18),
  ('reassignment -> IDENTIFIER INLINE_ARITH number SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',19),
  ('reassignment -> IDENTIFIER INLINE_ARITH SEMICOLON','reassignment',3,'p_reassignment','sintactico.py',20),
  ('reassignment -> IDENTIFIER INLINE_ARITH number','reassignment',3,'p_reassignment','sintactico.py',21),
  ('reassignment -> IDENTIFIER INLINE_ARITH','reassignment',2,'p_reassignment','sintactico.py',22),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',26),
  ('modifier -> LATE','modifier',1,'p_modifier','sintactico.py',30),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',31),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',32),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',36),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',37),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',42),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',43),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',44),
  ('function_call -> IDENTIFIER LPAREN values RPAREN SEMICOLON','function_call',5,'p_function_call','sintactico.py',50),
  ('function_call -> IDENTIFIER LPAREN values RPAREN','function_call',4,'p_function_call','sintactico.py',51),
  ('function_call -> IDENTIFIER LPAREN RPAREN SEMICOLON','function_call',4,'p_function_call','sintactico.py',52),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','sintactico.py',53),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',57),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',58),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',59),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',60),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',61),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',62),
  ('type -> VAR','type',1,'p_type','sintactico.py',63),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',64),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',65),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',66),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',67),
  ('type -> VOID','type',1,'p_type','sintactico.py',68),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',73),
  ('expression -> concate','expression',1,'p_expression','sintactico.py',74),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',75),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',76),
  ('expression -> division','expression',1,'p_expression','sintactico.py',77),
  ('arithmetic -> number','arithmetic',1,'p_arithmetic','sintactico.py',81),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',82),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',83),
  ('division -> number DIVIDE number','division',3,'p_division','sintactico.py',88),
  ('concate -> string PLUS string','concate',3,'p_concate','sintactico.py',94),
  ('comparison -> value','comparison',1,'p_comparison','sintactico.py',100),
  ('comparison -> boolean','comparison',1,'p_comparison','sintactico.py',101),
  ('comparison -> comparison comp_op comparison','comparison',3,'p_comparison','sintactico.py',102),
  ('comparison -> LPAREN comparison comp_op comparison RPAREN','comparison',5,'p_comparison','sintactico.py',103),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',107),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',108),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',109),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',110),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',114),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',115),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',119),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',120),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',121),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',126),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',127),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',128),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',129),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',130),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',131),
  ('values -> value','values',1,'p_values','sintactico.py',136),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',137),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',141),
  ('value -> number','value',1,'p_value','sintactico.py',142),
  ('value -> string','value',1,'p_value','sintactico.py',143),
  ('value -> list','value',1,'p_value','sintactico.py',144),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',148),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',149),
  ('string -> STRING','string',1,'p_string','sintactico.py',153),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',157),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',158),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',162),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',163),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',169),
  ('lines -> line LINE_BREAK lines','lines',3,'p_lines','sintactico.py',173),
  ('lines -> line lines','lines',2,'p_lines','sintactico.py',174),
  ('lines -> line','lines',1,'p_lines','sintactico.py',175),
  ('lines -> LINE_BREAK','lines',1,'p_lines','sintactico.py',176),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',177),
  ('line -> print','line',1,'p_line','sintactico.py',182),
  ('line -> assignment','line',1,'p_line','sintactico.py',183),
  ('line -> function','line',1,'p_line','sintactico.py',184),
  ('line -> if_statement','line',1,'p_line','sintactico.py',185),
  ('line -> while_statement','line',1,'p_line','sintactico.py',186),
  ('line -> for_statement','line',1,'p_line','sintactico.py',187),
  ('line -> function_call','line',1,'p_line','sintactico.py',188),
  ('line -> reassignment','line',1,'p_line','sintactico.py',189),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',195),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',196),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',197),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',198),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',203),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','sintactico.py',204),
  ('map -> MAP_TYPE LESS type COMMA type GREATER','map',6,'p_map','sintactico.py',208),
  ('map -> MAP_TYPE LESS type COMMA type GREATER LSQUARE values RSQUARE','map',9,'p_map','sintactico.py',209),
  ('map -> MAP_TYPE LESS type COMMA type GREATER LSQUARE RSQUARE','map',8,'p_map','sintactico.py',210),
  ('set -> SET_TYPE LESS type GREATER','set',4,'p_set','sintactico.py',215),
  ('set -> SET_TYPE LESS type GREATER LSQUARE values RSQUARE','set',7,'p_set','sintactico.py',216),
  ('set -> SET_TYPE LESS type GREATER LSQUARE RSQUARE','set',6,'p_set','sintactico.py',217),
  ('queue -> QUEUE_TYPE LESS type GREATER','queue',4,'p_queue','sintactico.py',221),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE','queue',7,'p_queue','sintactico.py',222),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE','queue',6,'p_queue','sintactico.py',223),
  ('while_statement -> WHILE LPAREN logic RPAREN LBRACE lines RBRACE','while_statement',7,'p_while_statement','sintactico.py',227),
  ('for_statement -> FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE','for_statement',11,'p_for_statement','sintactico.py',233),
]
