
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AS ASSERT ASSIGN ASYNC AWAIT BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DEFERRED DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXPORT EXTENDS EXTENSION EXTERNAL FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL HIDE IDENTIFIER IF IMPLEMENTS IMPORT IN INLINE_ARITH INTEGER INTEGER_TYPE INTERFACE IS KEYWORD LATE LBRACE LESS LESS_EQUAL LIBRARY LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL ON OPERATOR PART PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETHROW RETURN RPAREN RSQUARE SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUPER SWITCH SYNC THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE WITH YIELD\n    statement : expression\n              | assignment\n              | print\n              | function\n              | if_statement\n              | while_statement\n              | for_statement\n              | lines\n              | LBRACE lines RBRACE\n              | reassignment\n              | \n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n    \n        reassignment : IDENTIFIER ASSIGN expression SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number SEMICOLON\n                     | IDENTIFIER INLINE_ARITH SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number\n                     | IDENTIFIER INLINE_ARITH\n     nullable : QUESTION_MARK\n     modifier : LATE\n                | FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN values RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN values RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n            | VOID\n\n      expression : arithmetic\n                    | logic\n                    | function_call\n     arithmetic : value\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n     comparison : value\n        |   boolean\n        |   comparison comp_op comparison\n        |   LPAREN comparison comp_op comparison RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n        |   DIVIDE\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK lines\n            | line lines\n            | line\n            | LINE_BREAK\n            |\n\n     line : print\n            | assignment\n            | function\n            | if_statement\n            | while_statement\n            | for_statement\n            | function_call\n            | reassignment\n            \n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n            | IDENTIFIER \n  \n    map : MAP_TYPE LESS type COMMA type GREATER\n        | MAP_TYPE LESS type COMMA type GREATER LSQUARE values RSQUARE\n        | MAP_TYPE LESS type COMMA type GREATER LSQUARE RSQUARE\n    \n    set : SET_TYPE LESS type GREATER\n        | SET_TYPE LESS type GREATER LSQUARE values RSQUARE\n        | SET_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    queue : QUEUE_TYPE LESS type GREATER\n          | QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE\n          | QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    while_statement : WHILE LPAREN logic RPAREN LBRACE lines RBRACE\n    \n    for_statement : FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE\n    '
    
_lr_action_items = {'LBRACE':([0,53,152,153,164,189,],[10,103,171,172,177,190,]),'$end':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,17,23,24,25,26,27,44,45,46,47,48,49,51,52,55,56,57,58,59,60,61,62,77,83,87,88,96,98,99,102,104,105,106,108,117,118,129,130,132,144,145,146,148,158,162,166,167,168,169,170,175,176,182,184,185,188,192,],[-11,0,-1,-2,-3,-4,-5,-6,-7,-8,-10,-44,-45,-46,-72,-86,-87,-73,-47,-54,-74,-75,-51,-76,-77,-78,-79,-80,-89,-90,-91,-92,-93,-94,-95,-96,-20,-72,-87,-85,-57,-50,-81,-28,-9,-48,-47,-55,-19,-18,-84,-52,-82,-16,-17,-31,-26,-29,-15,-30,-25,-49,-56,-53,-14,-13,-12,-27,-112,-83,-113,]),'PRINT':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[18,-90,-89,-91,-92,-93,-94,18,-96,-95,18,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,18,-28,18,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,18,18,-14,-13,18,-12,-27,-112,-83,18,-113,]),'IF':([0,3,4,5,6,7,8,10,11,14,23,47,48,53,55,56,57,58,59,60,61,62,77,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[20,-90,-89,-91,-92,-93,-94,20,-96,-95,20,-76,-77,20,-89,-90,-91,-92,-93,-94,-95,-96,-20,20,-28,20,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,20,20,-14,-13,20,-12,-27,-112,-83,20,-113,]),'WHILE':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[21,-90,-89,-91,-92,-93,-94,21,-96,-95,21,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,21,-28,21,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,21,21,-14,-13,21,-12,-27,-112,-83,21,-113,]),'FOR':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[22,-90,-89,-91,-92,-93,-94,22,-96,-95,22,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,22,-28,22,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,22,22,-14,-13,22,-12,-27,-112,-83,22,-113,]),'LINE_BREAK':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[24,-90,-89,-91,-92,-93,-94,24,-96,-95,87,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,24,-28,24,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,24,24,-14,-13,24,-12,-27,-112,-83,24,-113,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,11,14,16,19,23,28,32,33,34,35,36,37,38,39,40,41,42,43,47,48,50,55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,75,76,77,78,79,84,85,87,89,90,91,92,93,94,95,97,102,103,107,109,112,113,117,118,122,123,124,128,131,133,136,137,139,142,144,145,146,148,154,158,159,162,165,166,167,171,172,175,176,177,181,182,184,185,188,190,192,],[17,-90,-89,-91,-92,-93,-94,63,-96,-95,74,83,63,83,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-76,-77,83,-89,-90,-91,-92,-93,-94,-95,-96,83,-60,-61,-62,-63,83,-58,-59,110,111,-21,114,-20,83,114,83,83,63,83,-64,-65,-66,-67,-68,-69,83,-28,63,83,135,114,140,-19,-18,83,83,83,155,83,83,114,114,163,-43,-16,-17,-31,-26,83,-29,114,-15,140,-30,-25,63,63,-14,-13,63,187,-12,-27,-112,-83,63,-113,]),'LPAREN':([0,17,18,19,20,21,22,28,63,64,65,66,67,68,69,70,71,74,76,79,84,85,89,90,91,92,93,94,95,97,107,112,114,122,123,124,131,136,137,154,159,],[19,78,79,19,84,85,86,97,78,107,-60,-61,-62,-63,97,-58,-59,113,19,19,97,97,131,-64,-65,-66,-67,-68,-69,97,107,19,78,107,97,131,131,19,19,97,19,]),'LOGICAL_NOT':([0,19,28,69,70,71,76,79,84,85,97,112,123,136,137,154,159,],[28,28,28,28,-58,-59,28,28,28,28,28,28,28,28,28,28,28,]),'LATE':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[29,-90,-89,-91,-92,-93,-94,29,-96,-95,29,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,29,29,-28,29,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,29,29,-14,-13,29,-12,-27,-112,-83,29,-113,]),'FINAL':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[30,-90,-89,-91,-92,-93,-94,30,-96,-95,30,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,30,30,-28,30,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,30,30,-14,-13,30,-12,-27,-112,-83,30,-113,]),'CONST':([0,3,4,5,6,7,8,10,11,14,23,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,117,118,144,145,146,148,158,162,166,167,171,172,175,176,177,182,184,185,188,190,192,],[31,-90,-89,-91,-92,-93,-94,31,-96,-95,31,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,31,31,-28,31,-19,-18,-16,-17,-31,-26,-29,-15,-30,-25,31,31,-14,-13,31,-12,-27,-112,-83,31,-113,]),'INTEGER_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[32,-90,-89,-91,-92,-93,-94,32,-96,-95,32,32,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,32,32,-28,32,32,-19,-18,-16,-17,-31,-26,-29,-15,32,-30,-25,32,32,-14,-13,32,-12,-27,-112,-83,32,-113,]),'DOUBLE_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[33,-90,-89,-91,-92,-93,-94,33,-96,-95,33,33,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,33,33,-28,33,33,-19,-18,-16,-17,-31,-26,-29,-15,33,-30,-25,33,33,-14,-13,33,-12,-27,-112,-83,33,-113,]),'BOOLEAN_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[34,-90,-89,-91,-92,-93,-94,34,-96,-95,34,34,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,34,34,-28,34,34,-19,-18,-16,-17,-31,-26,-29,-15,34,-30,-25,34,34,-14,-13,34,-12,-27,-112,-83,34,-113,]),'QUEUE_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[35,-90,-89,-91,-92,-93,-94,35,-96,-95,35,35,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,35,35,-28,35,35,-19,-18,-16,-17,-31,-26,-29,-15,35,-30,-25,35,35,-14,-13,35,-12,-27,-112,-83,35,-113,]),'STRING_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[36,-90,-89,-91,-92,-93,-94,36,-96,-95,36,36,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,36,36,-28,36,36,-19,-18,-16,-17,-31,-26,-29,-15,36,-30,-25,36,36,-14,-13,36,-12,-27,-112,-83,36,-113,]),'ENUM_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[37,-90,-89,-91,-92,-93,-94,37,-96,-95,37,37,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,37,37,-28,37,37,-19,-18,-16,-17,-31,-26,-29,-15,37,-30,-25,37,37,-14,-13,37,-12,-27,-112,-83,37,-113,]),'VAR':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[38,-90,-89,-91,-92,-93,-94,38,-96,-95,38,38,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,38,38,-28,38,38,-19,-18,-16,-17,-31,-26,-29,-15,38,-30,-25,38,38,-14,-13,38,-12,-27,-112,-83,38,-113,]),'LIST_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[39,-90,-89,-91,-92,-93,-94,39,-96,-95,39,39,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,39,39,-28,39,39,-19,-18,-16,-17,-31,-26,-29,-15,39,-30,-25,39,39,-14,-13,39,-12,-27,-112,-83,39,-113,]),'MAP_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[40,-90,-89,-91,-92,-93,-94,40,-96,-95,40,40,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,40,40,-28,40,40,-19,-18,-16,-17,-31,-26,-29,-15,40,-30,-25,40,40,-14,-13,40,-12,-27,-112,-83,40,-113,]),'SET_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[41,-90,-89,-91,-92,-93,-94,41,-96,-95,41,41,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,41,41,-28,41,41,-19,-18,-16,-17,-31,-26,-29,-15,41,-30,-25,41,41,-14,-13,41,-12,-27,-112,-83,41,-113,]),'DYNAMIC_TYPE':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[42,-90,-89,-91,-92,-93,-94,42,-96,-95,42,42,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,42,42,-28,42,42,-19,-18,-16,-17,-31,-26,-29,-15,42,-30,-25,42,42,-14,-13,42,-12,-27,-112,-83,42,-113,]),'VOID':([0,3,4,5,6,7,8,10,11,14,15,23,29,30,31,47,48,55,56,57,58,59,60,61,62,77,86,87,102,103,113,117,118,144,145,146,148,158,162,165,166,167,171,172,175,176,177,182,184,185,188,190,192,],[43,-90,-89,-91,-92,-93,-94,43,-96,-95,43,43,-22,-23,-24,-76,-77,-89,-90,-91,-92,-93,-94,-95,-96,-20,43,43,-28,43,142,-19,-18,-16,-17,-31,-26,-29,-15,142,-30,-25,43,43,-14,-13,43,-12,-27,-112,-83,43,-113,]),'INTEGER':([0,19,28,50,64,65,66,67,68,69,70,71,76,77,78,79,84,85,89,90,91,92,93,94,95,97,107,112,122,123,124,131,133,136,137,154,159,],[47,47,47,47,47,-60,-61,-62,-63,47,-58,-59,47,47,47,47,47,47,47,-64,-65,-66,-67,-68,-69,47,47,47,47,47,47,47,47,47,47,47,47,]),'DOUBLE':([0,19,28,50,64,65,66,67,68,69,70,71,76,77,78,79,84,85,89,90,91,92,93,94,95,97,107,112,122,123,124,131,133,136,137,154,159,],[48,48,48,48,48,-60,-61,-62,-63,48,-58,-59,48,48,48,48,48,48,48,-64,-65,-66,-67,-68,-69,48,48,48,48,48,48,48,48,48,48,48,48,]),'STRING':([0,19,28,50,64,65,66,67,68,69,70,71,76,78,79,84,85,89,90,91,92,93,94,95,97,107,112,122,123,124,131,133,136,137,154,159,],[49,49,49,49,49,-60,-61,-62,-63,49,-58,-59,49,49,49,49,49,49,-64,-65,-66,-67,-68,-69,49,49,49,49,49,49,49,49,49,49,49,49,]),'LSQUARE':([0,19,28,50,64,65,66,67,68,69,70,71,76,78,79,84,85,89,90,91,92,93,94,95,97,107,112,122,123,124,131,133,136,137,154,159,],[50,50,50,50,50,-60,-61,-62,-63,50,-58,-59,50,50,50,50,50,50,-64,-65,-66,-67,-68,-69,50,50,50,50,50,50,50,50,50,50,50,50,]),'TRUE':([0,19,28,69,70,71,76,79,84,85,89,90,91,92,93,94,95,97,112,123,124,131,136,137,154,159,],[51,51,51,51,-58,-59,51,51,51,51,51,-64,-65,-66,-67,-68,-69,51,51,51,51,51,51,51,51,51,]),'FALSE':([0,19,28,69,70,71,76,79,84,85,89,90,91,92,93,94,95,97,112,123,124,131,136,137,154,159,],[52,52,52,52,-58,-59,52,52,52,52,52,-64,-65,-66,-67,-68,-69,52,52,52,52,52,52,52,52,52,]),'ELSE':([6,58,102,158,184,],[53,53,53,-29,-27,]),'RBRACE':([10,23,24,47,48,54,55,56,57,58,59,60,61,62,77,87,88,102,103,117,118,129,134,144,145,146,148,158,162,166,167,171,172,175,176,177,179,180,182,183,184,185,188,190,191,192,],[-88,-86,-87,-76,-77,104,-89,-90,-91,-92,-93,-94,-95,-96,-20,-87,-85,-28,-88,-19,-18,-84,158,-16,-17,-31,-26,-29,-15,-30,-25,-88,-88,-14,-13,-88,184,185,-12,188,-27,-112,-83,-88,192,-113,]),'SEMICOLON':([12,13,25,26,27,44,45,46,47,48,49,51,52,77,83,96,98,99,105,106,108,114,115,116,117,121,127,130,132,138,146,147,160,161,162,166,168,169,170,173,174,175,176,182,],[-44,-45,-73,-47,-54,-74,-75,-51,-76,-77,-78,-79,-80,118,-72,-57,-50,-81,-48,-47,-55,-72,144,-46,145,148,154,-52,-82,162,166,167,175,176,-15,-30,-49,-56,-53,181,182,-14,-13,-12,]),'RPAREN':([12,13,25,26,27,44,45,46,47,48,49,51,52,77,79,83,96,98,99,101,105,106,108,113,114,116,117,118,119,120,125,126,130,132,140,141,142,143,144,145,146,149,150,151,157,163,165,166,168,169,170,178,186,],[-44,-45,-73,-47,-54,-74,-75,-51,-76,-77,-78,-79,-80,-20,121,-72,-57,-50,-81,-70,-48,-47,-55,-100,-72,-46,-19,-18,146,147,152,153,-52,-82,-102,164,-97,-98,-16,-17,-31,168,169,170,-71,-101,-100,-30,-49,-56,-53,-99,189,]),'PLUS':([12,17,25,26,44,45,47,48,49,80,83,99,105,106,114,132,149,168,],[65,-72,-73,-47,-74,-75,-76,-77,-78,65,-72,-81,65,-47,-72,-82,65,-49,]),'MINUS':([12,17,25,26,44,45,47,48,49,80,83,99,105,106,114,132,149,168,],[66,-72,-73,-47,-74,-75,-76,-77,-78,66,-72,-81,66,-47,-72,-82,66,-49,]),'TIMES':([12,17,25,26,44,45,47,48,49,80,83,99,105,106,114,132,149,168,],[67,-72,-73,-47,-74,-75,-76,-77,-78,67,-72,-81,67,-47,-72,-82,67,-49,]),'DIVIDE':([12,17,25,26,44,45,47,48,49,80,83,99,105,106,114,132,149,168,],[68,-72,-73,-47,-74,-75,-76,-77,-78,68,-72,-81,68,-47,-72,-82,68,-49,]),'LOGICAL_AND':([13,17,25,26,27,44,45,46,47,48,49,51,52,81,82,83,96,98,99,108,114,125,126,130,132,150,151,169,170,173,],[70,-72,-73,-50,-54,-74,-75,-51,-76,-77,-78,-79,-80,70,-54,-72,70,-50,-81,70,-72,70,70,-52,-82,70,-52,-56,-53,70,]),'LOGICAL_OR':([13,17,25,26,27,44,45,46,47,48,49,51,52,81,82,83,96,98,99,108,114,125,126,130,132,150,151,169,170,173,],[71,-72,-73,-50,-54,-74,-75,-51,-76,-77,-78,-79,-80,71,-54,-72,71,-50,-81,71,-72,71,71,-52,-82,71,-52,-56,-53,71,]),'QUESTION_MARK':([16,32,33,34,35,36,37,38,39,40,41,42,43,72,128,],[75,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,75,75,]),'ASSIGN':([17,63,74,110,111,135,155,187,],[76,76,112,136,137,159,112,76,]),'INLINE_ARITH':([17,63,187,],[77,77,77,]),'EQUAL':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,90,-74,-75,-51,-76,-77,-78,-79,-80,90,-72,-50,-81,-72,90,-82,90,90,-53,]),'NOT_EQUAL':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,91,-74,-75,-51,-76,-77,-78,-79,-80,91,-72,-50,-81,-72,91,-82,91,91,-53,]),'LESS':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,92,-74,-75,-51,-76,-77,-78,-79,-80,92,-72,-50,-81,-72,92,-82,92,92,-53,]),'LESS_EQUAL':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,93,-74,-75,-51,-76,-77,-78,-79,-80,93,-72,-50,-81,-72,93,-82,93,93,-53,]),'GREATER':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,94,-74,-75,-51,-76,-77,-78,-79,-80,94,-72,-50,-81,-72,94,-82,94,94,-53,]),'GREATER_EQUAL':([17,25,26,27,44,45,46,47,48,49,51,52,82,83,98,99,114,130,132,151,156,170,],[-72,-73,-50,95,-74,-75,-51,-76,-77,-78,-79,-80,95,-72,-50,-81,-72,95,-82,95,95,-53,]),'COMMA':([25,44,45,47,48,49,83,99,101,132,140,143,163,],[-73,-74,-75,-76,-77,-78,-72,-81,133,-82,-102,165,-101,]),'RSQUARE':([25,44,45,47,48,49,50,83,99,100,101,132,157,],[-73,-74,-75,-76,-77,-78,99,-72,-81,132,-70,-82,-71,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,76,79,112,136,137,159,],[2,115,120,138,160,161,174,]),'assignment':([0,10,23,86,87,103,171,172,177,190,],[3,56,56,127,56,56,56,56,56,56,]),'print':([0,10,23,87,103,171,172,177,190,],[4,55,55,55,55,55,55,55,55,]),'function':([0,10,23,87,103,171,172,177,190,],[5,57,57,57,57,57,57,57,57,]),'if_statement':([0,10,23,53,87,103,171,172,177,190,],[6,58,58,102,58,58,58,58,58,58,]),'while_statement':([0,10,23,87,103,171,172,177,190,],[7,59,59,59,59,59,59,59,59,]),'for_statement':([0,10,23,87,103,171,172,177,190,],[8,60,60,60,60,60,60,60,60,]),'lines':([0,10,23,87,103,171,172,177,190,],[9,54,88,129,134,179,180,183,191,]),'reassignment':([0,10,23,87,103,171,172,177,181,190,],[11,62,62,62,62,62,62,62,186,62,]),'arithmetic':([0,19,64,76,79,107,112,122,136,137,159,],[12,80,105,12,12,80,12,149,12,12,12,]),'logic':([0,19,28,69,76,79,84,85,97,112,123,136,137,154,159,],[13,81,96,108,13,13,125,126,81,13,150,13,13,173,13,]),'function_call':([0,10,23,76,79,87,103,112,136,137,159,171,172,177,190,],[14,61,61,116,116,61,61,116,116,116,116,61,61,61,61,]),'modifier':([0,10,23,86,87,103,171,172,177,190,],[15,15,15,15,15,15,15,15,15,15,]),'type':([0,10,15,23,86,87,103,113,165,171,172,177,190,],[16,16,72,16,128,16,16,139,139,16,16,16,16,]),'line':([0,10,23,87,103,171,172,177,190,],[23,23,23,23,23,23,23,23,23,]),'number':([0,19,28,50,64,69,76,77,78,79,84,85,89,97,107,112,122,123,124,131,133,136,137,154,159,],[25,25,25,25,25,25,25,117,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'value':([0,19,28,50,64,69,76,78,79,84,85,89,97,107,112,122,123,124,131,133,136,137,154,159,],[26,26,98,101,106,98,26,101,26,98,98,98,98,106,26,106,98,98,98,101,26,26,98,26,]),'comparison':([0,19,28,69,76,79,84,85,89,97,112,123,124,131,136,137,154,159,],[27,82,27,27,27,27,27,27,130,82,27,27,151,156,27,27,27,27,]),'string':([0,19,28,50,64,69,76,78,79,84,85,89,97,107,112,122,123,124,131,133,136,137,154,159,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'list':([0,19,28,50,64,69,76,78,79,84,85,89,97,107,112,122,123,124,131,133,136,137,154,159,],[45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,]),'boolean':([0,19,28,69,76,79,84,85,89,97,112,123,124,131,136,137,154,159,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'arith_op':([12,80,105,149,],[64,122,64,64,]),'logic_op':([13,81,96,108,125,126,150,173,],[69,123,69,69,69,69,69,69,]),'nullable':([16,72,128,],[73,109,73,]),'comp_op':([27,82,130,151,156,],[89,124,89,89,124,]),'values':([50,78,133,],[100,119,157,]),'parameters':([113,165,],[141,178,]),'parameter':([113,165,],[143,143,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> while_statement','statement',1,'p_statement','sintactico.py',11),
  ('statement -> for_statement','statement',1,'p_statement','sintactico.py',12),
  ('statement -> lines','statement',1,'p_statement','sintactico.py',13),
  ('statement -> LBRACE lines RBRACE','statement',3,'p_statement','sintactico.py',14),
  ('statement -> reassignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',16),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',19),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',20),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',21),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',22),
  ('reassignment -> IDENTIFIER ASSIGN expression SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',27),
  ('reassignment -> IDENTIFIER INLINE_ARITH number SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',28),
  ('reassignment -> IDENTIFIER INLINE_ARITH SEMICOLON','reassignment',3,'p_reassignment','sintactico.py',29),
  ('reassignment -> IDENTIFIER INLINE_ARITH number','reassignment',3,'p_reassignment','sintactico.py',30),
  ('reassignment -> IDENTIFIER INLINE_ARITH','reassignment',2,'p_reassignment','sintactico.py',31),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',35),
  ('modifier -> LATE','modifier',1,'p_modifier','sintactico.py',39),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',40),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',41),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',45),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',46),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',51),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',52),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',53),
  ('function_call -> IDENTIFIER LPAREN values RPAREN SEMICOLON','function_call',5,'p_function_call','sintactico.py',59),
  ('function_call -> IDENTIFIER LPAREN values RPAREN','function_call',4,'p_function_call','sintactico.py',60),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',64),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',65),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',66),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',67),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',68),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',69),
  ('type -> VAR','type',1,'p_type','sintactico.py',70),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',71),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',72),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',73),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',74),
  ('type -> VOID','type',1,'p_type','sintactico.py',75),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',80),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',81),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',82),
  ('arithmetic -> value','arithmetic',1,'p_arithmetic','sintactico.py',86),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',87),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',88),
  ('comparison -> value','comparison',1,'p_comparison','sintactico.py',92),
  ('comparison -> boolean','comparison',1,'p_comparison','sintactico.py',93),
  ('comparison -> comparison comp_op comparison','comparison',3,'p_comparison','sintactico.py',94),
  ('comparison -> LPAREN comparison comp_op comparison RPAREN','comparison',5,'p_comparison','sintactico.py',95),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',99),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',100),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',101),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',102),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',106),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',107),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',111),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',112),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',113),
  ('arith_op -> DIVIDE','arith_op',1,'p_arith_op','sintactico.py',114),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',119),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',120),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',121),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',122),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',123),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',124),
  ('values -> value','values',1,'p_values','sintactico.py',129),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',130),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',134),
  ('value -> number','value',1,'p_value','sintactico.py',135),
  ('value -> string','value',1,'p_value','sintactico.py',136),
  ('value -> list','value',1,'p_value','sintactico.py',137),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',141),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',142),
  ('string -> STRING','string',1,'p_string','sintactico.py',146),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',150),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',151),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',155),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',156),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',162),
  ('lines -> line LINE_BREAK lines','lines',3,'p_lines','sintactico.py',166),
  ('lines -> line lines','lines',2,'p_lines','sintactico.py',167),
  ('lines -> line','lines',1,'p_lines','sintactico.py',168),
  ('lines -> LINE_BREAK','lines',1,'p_lines','sintactico.py',169),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',170),
  ('line -> print','line',1,'p_line','sintactico.py',175),
  ('line -> assignment','line',1,'p_line','sintactico.py',176),
  ('line -> function','line',1,'p_line','sintactico.py',177),
  ('line -> if_statement','line',1,'p_line','sintactico.py',178),
  ('line -> while_statement','line',1,'p_line','sintactico.py',179),
  ('line -> for_statement','line',1,'p_line','sintactico.py',180),
  ('line -> function_call','line',1,'p_line','sintactico.py',181),
  ('line -> reassignment','line',1,'p_line','sintactico.py',182),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',188),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',189),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',190),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',191),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',196),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','sintactico.py',197),
  ('map -> MAP_TYPE LESS type COMMA type GREATER','map',6,'p_map','sintactico.py',201),
  ('map -> MAP_TYPE LESS type COMMA type GREATER LSQUARE values RSQUARE','map',9,'p_map','sintactico.py',202),
  ('map -> MAP_TYPE LESS type COMMA type GREATER LSQUARE RSQUARE','map',8,'p_map','sintactico.py',203),
  ('set -> SET_TYPE LESS type GREATER','set',4,'p_set','sintactico.py',208),
  ('set -> SET_TYPE LESS type GREATER LSQUARE values RSQUARE','set',7,'p_set','sintactico.py',209),
  ('set -> SET_TYPE LESS type GREATER LSQUARE RSQUARE','set',6,'p_set','sintactico.py',210),
  ('queue -> QUEUE_TYPE LESS type GREATER','queue',4,'p_queue','sintactico.py',214),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE','queue',7,'p_queue','sintactico.py',215),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE','queue',6,'p_queue','sintactico.py',216),
  ('while_statement -> WHILE LPAREN logic RPAREN LBRACE lines RBRACE','while_statement',7,'p_while_statement','sintactico.py',220),
  ('for_statement -> FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE','for_statement',11,'p_for_statement','sintactico.py',226),
]
