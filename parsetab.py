
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ASSIGN BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXTENDS FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL IDENTIFIER IF IMPLEMENTS IN INLINE_ARITH INTEGER INTEGER_TYPE LBRACE LESS LESS_EQUAL LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETURN RPAREN RSQUARE SEMICOLON SET_TYPE STRING STRING_TYPE SWITCH THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE ZERO\n    statement : expression\n              | assignment\n              | print\n              | function\n              | if_statement\n              | while_statement\n              | for_statement\n              | lines\n              | LBRACE lines RBRACE\n              | reassignment\n              | \n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression\n                    | int_assignment\n                    | string_assignment\n                    | list_assigment\n                    | map_assigment\n      int_assignment :  number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type IDENTIFIER ASSIGN arithmetic\n                    | modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    \n      string_assignment : type_string IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string IDENTIFIER ASSIGN concate\n                    | modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | modifier type_string IDENTIFIER ASSIGN concate SEMICOLON\n                  \n     number_type : INTEGER_TYPE\n                        | VAR\n                        | DOUBLE_TYPE\n     type_string : STRING_TYPE\n                    | VAR\n    \n        reassignment : IDENTIFIER ASSIGN expression SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number SEMICOLON\n                     | IDENTIFIER INLINE_ARITH SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number\n                     | IDENTIFIER INLINE_ARITH\n     nullable : QUESTION_MARK\n     modifier : FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN values RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN values RPAREN\n                    | IDENTIFIER LPAREN RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n            | VOID\n\n      expression : arithmetic\n                    | concate\n                    | logic\n                    | function_call\n                    | division\n     arithmetic : number\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n        \n    \n    division : number DIVIDE number\n     concate : string\n        |   concate PLUS concate\n        |   LPAREN concate PLUS concate RPAREN\n     comparison : int_comparison\n        |   string_comparison\n     int_comparison : boolean\n        |   number comp_op number\n        |   LPAREN number comp_op number RPAREN\n     string_comparison : boolean\n        |   string comp_op string\n        |   LPAREN string comp_op string RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n     list_assigment : IDENTIFIER ASSIGN list SEMICOLON\n                | type ASSIGN list SEMICOLON\n\n\n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK lines\n            | line lines\n            | line\n            | LINE_BREAK\n            |\n\n     line : print\n            | assignment\n            | function\n            | if_statement\n            | while_statement\n            | for_statement\n            | function_call\n            | reassignment\n            \n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n            | IDENTIFIER \n  \n    map : MAP_TYPE LESS type COMMA type GREATER\n        | MAP_TYPE\n    \n    map_assigment : map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON\n                |   map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON\n                |   IDENTIFIER IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON\n                |   IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON\n    map_values : type COLON type\n                 |  type COLON type COMMA map_values\n    \n    set : SET_TYPE LESS type GREATER\n        | SET_TYPE LESS type GREATER LSQUARE values RSQUARE\n        | SET_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    queue : QUEUE_TYPE LESS type GREATER\n          | QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE\n          | QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    while_statement : WHILE LPAREN logic RPAREN LBRACE lines RBRACE\n    \n    for_statement : FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE\n    '
    
_lr_action_items = {'LBRACE':([0,60,88,142,184,217,218,221,238,302,],[10,122,146,202,227,252,253,146,273,305,]),'$end':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,20,21,22,23,29,30,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,100,101,111,121,123,124,125,127,128,130,147,148,149,152,169,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,256,259,265,268,271,272,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,307,],[-11,0,-1,-2,-3,-4,-5,-6,-7,-8,-10,-69,-70,-71,-72,-73,-17,-18,-19,-20,-122,-123,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,-123,-121,-92,-51,-9,-75,-74,-79,-78,-90,-72,-43,-42,-56,-120,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,-21,-28,-14,-27,-34,-13,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,-154,]),'PRINT':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[24,-126,-125,-127,-128,-129,-130,24,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,24,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,24,-92,-51,24,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,24,24,-21,-28,-14,-27,-34,-13,24,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,24,-154,]),'IF':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,89,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[26,-126,-125,-127,-128,-129,-130,26,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,26,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,26,-125,-126,-127,-128,-129,-130,-131,-132,-44,26,-92,-51,26,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,26,26,-21,-28,-14,-27,-34,-13,26,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,26,-154,]),'WHILE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[27,-126,-125,-127,-128,-129,-130,27,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,27,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,27,-92,-51,27,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,27,27,-21,-28,-14,-27,-34,-13,27,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,27,-154,]),'FOR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[28,-126,-125,-127,-128,-129,-130,28,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,28,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,28,-92,-51,28,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,28,28,-21,-28,-14,-27,-34,-13,28,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,28,-154,]),'LINE_BREAK':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[30,-126,-125,-127,-128,-129,-130,30,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,100,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,30,-92,-51,30,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,30,30,-21,-28,-14,-27,-34,-13,30,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,30,-154,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,18,19,20,21,22,23,29,31,32,33,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,70,79,80,81,82,83,86,88,89,90,91,99,100,111,117,119,121,122,124,125,127,128,130,131,133,135,138,139,141,147,148,149,152,167,168,170,171,172,176,177,178,179,187,192,193,194,197,199,203,204,206,207,208,209,211,223,225,228,229,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,279,280,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,303,305,307,],[19,-126,-125,-127,-128,-129,-130,70,-132,-69,-70,-71,-131,-73,84,87,-17,-18,-19,-20,70,-74,-78,-89,-35,-37,-59,-60,-38,-62,-36,-64,-65,-66,-67,-68,116,118,120,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,87,132,134,136,-65,137,-45,143,-44,150,143,168,70,-92,181,183,-51,70,-75,-74,-79,-78,-90,186,188,190,143,195,150,-72,-43,-42,-56,220,87,-77,-84,-87,-57,-58,-61,-63,143,143,-16,237,-68,-118,-40,-117,-41,-54,-55,150,-49,-22,-29,-52,143,-15,195,-144,-53,-48,-76,-80,-91,-85,-88,70,70,-21,-28,-14,-27,-34,-13,70,298,-139,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,143,70,-154,]),'LPAREN':([0,19,24,25,26,27,28,34,70,71,72,73,74,75,76,77,78,84,88,91,97,98,112,126,129,138,143,159,160,161,180,182,187,189,191,192,219,224,226,229,231,233,303,],[25,90,91,25,97,98,99,112,90,126,-95,-96,-97,129,112,-93,-94,139,25,25,112,112,112,126,129,25,90,126,129,112,126,129,25,126,129,25,112,126,129,25,126,129,25,]),'LOGICAL_NOT':([0,25,34,76,77,78,88,91,97,98,112,138,161,187,192,219,229,303,],[34,34,34,34,-93,-94,34,34,34,34,34,34,34,34,34,34,34,34,]),'FINAL':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[35,-126,-125,-127,-128,-129,-130,35,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,35,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,35,35,-92,-51,35,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,35,35,-21,-28,-14,-27,-34,-13,35,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,35,-154,]),'CONST':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,23,29,31,32,33,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,121,122,124,125,127,128,130,147,148,149,152,170,171,172,193,199,203,204,206,207,208,211,223,225,228,236,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,305,307,],[36,-126,-125,-127,-128,-129,-130,36,-132,-69,-70,-71,-131,-73,-17,-18,-19,-20,36,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,36,36,-92,-51,36,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,-52,-15,-144,-53,-48,-76,-80,-91,-85,-88,36,36,-21,-28,-14,-27,-34,-13,36,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,36,-154,]),'INTEGER_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[37,-126,-125,-127,-128,-129,-130,37,-132,-69,-70,-71,-131,-73,37,-17,-18,-19,-20,37,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,37,37,-92,176,-51,37,-75,-74,-79,-78,-90,176,-72,-43,-42,-56,-77,-84,-87,-16,-118,176,-40,-117,-41,-54,-55,-49,176,-22,-29,176,-52,-15,176,-144,-53,-48,-76,-80,-91,-85,-88,37,37,-21,-28,-14,-27,-34,-13,37,176,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,176,37,-154,]),'DOUBLE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[38,-126,-125,-127,-128,-129,-130,38,-132,-69,-70,-71,-131,-73,38,-17,-18,-19,-20,38,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,38,38,-92,177,-51,38,-75,-74,-79,-78,-90,177,-72,-43,-42,-56,-77,-84,-87,-16,-118,177,-40,-117,-41,-54,-55,-49,177,-22,-29,177,-52,-15,177,-144,-53,-48,-76,-80,-91,-85,-88,38,38,-21,-28,-14,-27,-34,-13,38,177,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,177,38,-154,]),'BOOLEAN_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[39,-126,-125,-127,-128,-129,-130,39,-132,-69,-70,-71,-131,-73,39,-17,-18,-19,-20,39,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,39,39,-92,39,-51,39,-75,-74,-79,-78,-90,39,-72,-43,-42,-56,-77,-84,-87,-16,-118,39,-40,-117,-41,-54,-55,-49,39,-22,-29,39,-52,-15,39,-144,-53,-48,-76,-80,-91,-85,-88,39,39,-21,-28,-14,-27,-34,-13,39,39,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,39,39,-154,]),'QUEUE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[40,-126,-125,-127,-128,-129,-130,40,-132,-69,-70,-71,-131,-73,40,-17,-18,-19,-20,40,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,40,40,-92,40,-51,40,-75,-74,-79,-78,-90,40,-72,-43,-42,-56,-77,-84,-87,-16,-118,40,-40,-117,-41,-54,-55,-49,40,-22,-29,40,-52,-15,40,-144,-53,-48,-76,-80,-91,-85,-88,40,40,-21,-28,-14,-27,-34,-13,40,40,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,40,40,-154,]),'STRING_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[41,-126,-125,-127,-128,-129,-130,41,-132,-69,-70,-71,-131,-73,41,-17,-18,-19,-20,41,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,41,41,-92,178,-51,41,-75,-74,-79,-78,-90,178,-72,-43,-42,-56,-77,-84,-87,-16,-118,178,-40,-117,-41,-54,-55,-49,178,-22,-29,178,-52,-15,178,-144,-53,-48,-76,-80,-91,-85,-88,41,41,-21,-28,-14,-27,-34,-13,41,178,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,178,41,-154,]),'ENUM_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[42,-126,-125,-127,-128,-129,-130,42,-132,-69,-70,-71,-131,-73,42,-17,-18,-19,-20,42,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,42,42,-92,42,-51,42,-75,-74,-79,-78,-90,42,-72,-43,-42,-56,-77,-84,-87,-16,-118,42,-40,-117,-41,-54,-55,-49,42,-22,-29,42,-52,-15,42,-144,-53,-48,-76,-80,-91,-85,-88,42,42,-21,-28,-14,-27,-34,-13,42,42,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,42,42,-154,]),'VAR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[43,-126,-125,-127,-128,-129,-130,43,-132,-69,-70,-71,-131,-73,43,-17,-18,-19,-20,43,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,43,43,-92,179,-51,43,-75,-74,-79,-78,-90,179,-72,-43,-42,-56,-77,-84,-87,-16,-118,179,-40,-117,-41,-54,-55,-49,179,-22,-29,179,-52,-15,179,-144,-53,-48,-76,-80,-91,-85,-88,43,43,-21,-28,-14,-27,-34,-13,43,179,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,179,43,-154,]),'LIST_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[44,-126,-125,-127,-128,-129,-130,44,-132,-69,-70,-71,-131,-73,44,-17,-18,-19,-20,44,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,44,44,-92,44,-51,44,-75,-74,-79,-78,-90,44,-72,-43,-42,-56,-77,-84,-87,-16,-118,44,-40,-117,-41,-54,-55,-49,44,-22,-29,44,-52,-15,44,-144,-53,-48,-76,-80,-91,-85,-88,44,44,-21,-28,-14,-27,-34,-13,44,44,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,44,44,-154,]),'MAP_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[45,-126,-125,-127,-128,-129,-130,45,-132,-69,-70,-71,-131,-73,82,-17,-18,-19,-20,45,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,45,45,-92,82,-51,45,-75,-74,-79,-78,-90,82,-72,-43,-42,-56,-77,-84,-87,-16,-118,82,-40,-117,-41,-54,-55,-49,82,-22,-29,82,-52,-15,82,-144,-53,-48,-76,-80,-91,-85,-88,45,45,-21,-28,-14,-27,-34,-13,45,82,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,82,45,-154,]),'SET_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[46,-126,-125,-127,-128,-129,-130,46,-132,-69,-70,-71,-131,-73,46,-17,-18,-19,-20,46,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,46,46,-92,46,-51,46,-75,-74,-79,-78,-90,46,-72,-43,-42,-56,-77,-84,-87,-16,-118,46,-40,-117,-41,-54,-55,-49,46,-22,-29,46,-52,-15,46,-144,-53,-48,-76,-80,-91,-85,-88,46,46,-21,-28,-14,-27,-34,-13,46,46,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,46,46,-154,]),'DYNAMIC_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[47,-126,-125,-127,-128,-129,-130,47,-132,-69,-70,-71,-131,-73,47,-17,-18,-19,-20,47,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,47,47,-92,47,-51,47,-75,-74,-79,-78,-90,47,-72,-43,-42,-56,-77,-84,-87,-16,-118,47,-40,-117,-41,-54,-55,-49,47,-22,-29,47,-52,-15,47,-144,-53,-48,-76,-80,-91,-85,-88,47,47,-21,-28,-14,-27,-34,-13,47,47,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,47,47,-154,]),'VOID':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,23,29,31,32,33,35,36,52,53,54,55,56,57,58,59,62,63,64,65,66,67,68,69,89,99,100,111,115,121,122,124,125,127,128,130,139,147,148,149,152,170,171,172,193,199,202,203,204,206,207,208,211,222,223,225,227,228,236,239,243,244,246,247,248,249,250,251,252,253,256,259,265,268,271,272,273,276,281,282,283,284,285,287,288,289,290,291,293,295,296,299,300,301,305,307,],[48,-126,-125,-127,-128,-129,-130,48,-132,-69,-70,-71,-131,-73,48,-17,-18,-19,-20,48,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-125,-126,-127,-128,-129,-130,-131,-132,-44,48,48,-92,48,-51,48,-75,-74,-79,-78,-90,197,-72,-43,-42,-56,-77,-84,-87,-16,-118,48,-40,-117,-41,-54,-55,-49,48,-22,-29,48,-52,-15,197,-144,-53,-48,-76,-80,-91,-85,-88,48,48,-21,-28,-14,-27,-34,-13,48,48,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,-143,-50,-153,-142,-119,48,48,-154,]),'INTEGER':([0,25,34,71,72,73,74,76,77,78,88,89,90,91,97,98,102,103,104,105,106,107,108,109,112,126,138,141,159,161,162,180,187,189,192,209,219,224,229,231,303,],[52,52,52,52,-95,-96,-97,52,-93,-94,52,52,52,52,52,52,52,52,-98,-99,-100,-101,-102,-103,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'DOUBLE':([0,25,34,71,72,73,74,76,77,78,88,89,90,91,97,98,102,103,104,105,106,107,108,109,112,126,138,141,159,161,162,180,187,189,192,209,219,224,229,231,303,],[53,53,53,53,-95,-96,-97,53,-93,-94,53,53,53,53,53,53,53,53,-98,-99,-100,-101,-102,-103,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'STRING':([0,25,34,75,76,77,78,88,90,91,97,98,104,105,106,107,108,109,110,112,129,138,141,160,161,163,182,187,191,192,209,219,226,229,233,303,],[54,54,54,54,54,-93,-94,54,54,54,54,54,-98,-99,-100,-101,-102,-103,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'TRUE':([0,25,34,76,77,78,88,91,97,98,112,138,161,187,192,219,229,303,],[58,58,58,58,-93,-94,58,58,58,58,58,58,58,58,58,58,58,58,]),'FALSE':([0,25,34,76,77,78,88,91,97,98,112,138,161,187,192,219,229,303,],[59,59,59,59,-93,-94,59,59,59,59,59,59,59,59,59,59,59,59,]),'ELSE':([6,65,121,228,295,],[60,60,60,-52,-50,]),'RBRACE':([10,12,13,14,16,20,21,22,23,29,30,31,32,33,39,40,42,44,46,47,48,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,69,82,89,100,101,111,121,122,124,125,127,128,130,146,147,148,149,152,169,170,171,172,176,177,178,179,185,193,199,203,204,206,207,208,211,223,225,227,228,236,241,243,244,246,247,248,249,250,251,252,253,256,259,263,265,268,271,272,273,277,278,281,282,283,284,285,287,288,289,290,291,292,293,294,295,296,299,300,304,305,306,307,],[-124,-69,-70,-71,-73,-17,-18,-19,-20,-122,-123,-74,-78,-89,-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-81,-82,-83,-113,-114,123,-125,-126,-127,-128,-129,-130,-131,-132,-65,-44,-123,-121,-92,-51,-124,-75,-74,-79,-78,-90,205,-72,-43,-42,-56,-120,-77,-84,-87,-57,-58,-61,-63,228,-16,-118,-40,-117,-41,-54,-55,-49,-22,-29,262,-52,-15,275,-144,-53,-48,-76,-80,-91,-85,-88,-124,-124,-21,-28,286,-14,-27,-34,-13,-124,295,296,-24,-26,-31,-33,-141,-12,-23,-25,-30,-32,300,-143,-145,-50,-153,-142,-119,-146,-124,307,-154,]),'SEMICOLON':([12,13,14,16,20,21,22,23,31,32,33,52,53,54,55,56,57,58,59,89,111,124,125,127,128,130,140,144,145,147,148,152,158,166,170,171,172,193,199,200,204,205,207,208,210,223,225,230,232,234,235,236,240,243,244,247,248,249,250,251,254,256,257,258,259,260,261,262,264,265,266,267,268,269,270,271,272,275,281,282,283,284,285,286,287,288,289,290,291,293,299,],[-69,-70,-71,-73,-17,-18,-19,-20,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,149,-92,-75,-74,-79,-78,-90,199,203,204,-72,206,208,211,219,-77,-84,-87,236,-118,-115,-117,243,244,-55,246,256,259,265,268,271,272,-15,-116,-144,-53,-76,-80,-91,-85,-88,279,-21,281,282,-28,283,284,285,287,-14,288,289,-27,290,291,-34,-13,293,-24,-26,-31,-33,-141,299,-12,-23,-25,-30,-32,-143,-142,]),'RPAREN':([12,13,14,16,31,32,33,52,53,54,55,56,57,58,59,89,90,91,111,124,125,127,128,130,139,147,148,149,150,151,152,153,154,155,156,157,164,165,170,171,172,195,196,197,198,200,203,206,207,208,212,213,214,215,216,237,239,240,244,245,247,248,249,250,251,274,297,],[-69,-70,-71,-73,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-44,152,158,-92,-75,-74,-79,-78,-90,-136,-72,-43,-42,-106,207,-56,-104,-107,-108,-109,210,217,218,-77,-84,-87,-138,238,-133,-134,-115,-40,-41,-54,-55,247,248,249,250,251,-137,-136,-116,-53,-105,-76,-80,-91,-85,-88,-135,302,]),'PLUS':([12,13,31,32,52,53,54,92,93,95,96,124,125,127,128,212,213,223,225,232,234,247,248,258,261,267,270,],[72,75,-74,-78,-110,-111,-112,72,160,-74,-78,72,-74,75,-78,72,75,72,75,72,75,-76,-80,72,75,72,75,]),'MINUS':([12,31,52,53,92,95,124,125,212,223,232,247,258,267,],[73,-74,-110,-111,73,-74,73,-74,73,73,73,-76,73,73,]),'TIMES':([12,31,52,53,92,95,124,125,212,223,232,247,258,267,],[74,-74,-110,-111,74,-74,74,-74,74,74,74,-76,74,74,]),'LOGICAL_AND':([14,33,52,53,54,55,56,57,58,59,94,111,130,164,165,171,172,214,215,216,249,250,251,254,],[77,-89,-110,-111,-112,-81,-82,-83,-113,-114,77,77,77,77,77,-84,-87,77,-84,-87,-91,-85,-88,77,]),'LOGICAL_OR':([14,33,52,53,54,55,56,57,58,59,94,111,130,164,165,171,172,214,215,216,249,250,251,254,],[78,-89,-110,-111,-112,-81,-82,-83,-113,-114,78,78,78,78,78,-84,-87,78,-84,-87,-91,-85,-88,78,]),'ASSIGN':([18,19,37,38,39,40,41,42,43,44,45,46,47,48,70,84,87,116,118,120,132,134,136,137,167,168,181,183,186,188,190,220,298,],[85,88,-57,-58,-59,-60,-61,-62,-63,-64,-65,-66,-67,-68,88,138,142,180,182,184,187,189,191,192,85,221,224,226,229,231,233,138,303,]),'QUESTION_MARK':([18,37,38,39,40,41,42,43,44,45,46,47,48,49,50,79,80,81,82,167,],[86,-35,-37,-59,-60,-38,-62,-36,-64,-65,-66,-67,-68,86,86,86,86,86,-65,86,]),'INLINE_ARITH':([19,70,298,],[89,89,89,]),'DIVIDE':([31,52,53,],[102,-110,-111,]),'EQUAL':([31,32,52,53,54,95,96,113,114,173,174,],[104,104,-110,-111,-112,104,104,104,104,104,104,]),'NOT_EQUAL':([31,32,52,53,54,95,96,113,114,173,174,],[105,105,-110,-111,-112,105,105,105,105,105,105,]),'LESS':([31,32,45,52,53,54,95,96,113,114,173,174,],[106,106,115,-110,-111,-112,106,106,106,106,106,106,]),'LESS_EQUAL':([31,32,52,53,54,95,96,113,114,173,174,],[107,107,-110,-111,-112,107,107,107,107,107,107,]),'GREATER':([31,32,39,40,42,44,46,47,48,52,53,54,82,95,96,113,114,173,174,176,177,178,179,255,],[108,108,-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-65,108,108,108,108,108,108,-57,-58,-61,-63,280,]),'GREATER_EQUAL':([31,32,52,53,54,95,96,113,114,173,174,],[109,109,-110,-111,-112,109,109,109,109,109,109,]),'COMMA':([39,40,42,44,46,47,48,52,53,54,82,150,153,154,155,156,175,176,177,178,179,195,198,200,237,240,294,],[-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-65,-106,209,-107,-108,-109,222,-57,-58,-61,-63,-138,239,-115,-137,-116,301,]),'COLON':([39,40,42,44,46,47,48,82,176,177,178,179,242,],[-59,-60,-62,-64,-66,-67,-68,-65,-57,-58,-61,-63,276,]),'RSQUARE':([52,53,54,141,150,153,154,155,156,200,201,240,245,],[-110,-111,-112,200,-106,-104,-107,-108,-109,-115,240,-116,-105,]),'LSQUARE':([85,88,90,141,209,221,],[141,141,141,141,141,141,]),'NULL':([224,226,231,233,],[257,260,266,269,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,88,91,138,187,192,229,303,],[2,144,157,193,230,235,264,144,]),'assignment':([0,10,29,99,100,122,252,253,273,305,],[3,63,63,166,63,63,63,63,63,63,]),'print':([0,10,29,100,122,252,253,273,305,],[4,62,62,62,62,62,62,62,62,]),'function':([0,10,29,100,122,252,253,273,305,],[5,64,64,64,64,64,64,64,64,]),'if_statement':([0,10,29,60,100,122,252,253,273,305,],[6,65,65,121,65,65,65,65,65,65,]),'while_statement':([0,10,29,100,122,252,253,273,305,],[7,66,66,66,66,66,66,66,66,]),'for_statement':([0,10,29,100,122,252,253,273,305,],[8,67,67,67,67,67,67,67,67,]),'lines':([0,10,29,100,122,252,253,273,305,],[9,61,101,169,185,277,278,292,306,]),'reassignment':([0,10,29,100,122,252,253,273,279,305,],[11,69,69,69,69,69,69,69,297,69,]),'arithmetic':([0,25,71,88,91,126,138,159,180,187,189,192,224,229,231,303,],[12,92,124,12,12,92,12,212,223,12,232,12,258,12,267,12,]),'concate':([0,25,75,88,91,129,138,160,182,187,191,192,226,229,233,303,],[13,93,127,13,13,93,13,213,225,13,234,13,261,13,270,13,]),'logic':([0,25,34,76,88,91,97,98,112,138,161,187,192,219,229,303,],[14,94,111,130,14,14,164,165,94,14,214,14,14,254,14,14,]),'function_call':([0,10,29,88,91,100,122,138,187,192,229,252,253,273,303,305,],[15,68,68,147,147,68,68,147,147,147,147,68,68,68,147,68,]),'division':([0,88,91,138,187,192,229,303,],[16,16,16,16,16,16,16,16,]),'modifier':([0,10,29,99,100,122,252,253,273,305,],[17,17,17,17,17,17,17,17,17,17,]),'type':([0,10,17,29,99,100,115,122,139,202,222,227,239,252,253,273,276,301,305,],[18,18,79,18,167,18,175,18,194,242,255,242,194,18,18,18,294,242,18,]),'int_assignment':([0,10,29,99,100,122,252,253,273,305,],[20,20,20,20,20,20,20,20,20,20,]),'string_assignment':([0,10,29,99,100,122,252,253,273,305,],[21,21,21,21,21,21,21,21,21,21,]),'list_assigment':([0,10,29,99,100,122,252,253,273,305,],[22,22,22,22,22,22,22,22,22,22,]),'map_assigment':([0,10,29,99,100,122,252,253,273,305,],[23,23,23,23,23,23,23,23,23,23,]),'line':([0,10,29,100,122,252,253,273,305,],[29,29,29,29,29,29,29,29,29,]),'number':([0,25,34,71,76,88,89,90,91,97,98,102,103,112,126,138,141,159,161,162,180,187,189,192,209,219,224,229,231,303,],[31,95,113,125,113,31,148,154,31,113,113,170,171,173,125,31,154,125,113,215,125,31,125,31,154,113,125,31,125,31,]),'string':([0,25,34,75,76,88,90,91,97,98,110,112,129,138,141,160,161,163,182,187,191,192,209,219,226,229,233,303,],[32,96,114,128,114,32,155,32,114,114,172,174,128,32,155,128,114,216,128,32,128,32,155,114,128,32,128,32,]),'comparison':([0,25,34,76,88,91,97,98,112,138,161,187,192,219,229,303,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'number_type':([0,10,17,29,99,100,122,252,253,273,305,],[49,49,80,49,49,49,49,49,49,49,49,]),'type_string':([0,10,17,29,99,100,122,252,253,273,305,],[50,50,81,50,50,50,50,50,50,50,50,]),'map':([0,10,29,99,100,122,252,253,273,305,],[51,51,51,51,51,51,51,51,51,51,]),'int_comparison':([0,25,34,76,88,91,97,98,112,138,161,187,192,219,229,303,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'string_comparison':([0,25,34,76,88,91,97,98,112,138,161,187,192,219,229,303,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'boolean':([0,25,34,76,88,91,97,98,112,138,161,187,192,219,229,303,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'arith_op':([12,92,124,212,223,232,258,267,],[71,159,71,71,71,71,71,71,]),'logic_op':([14,94,111,130,164,165,214,254,],[76,161,76,76,76,76,76,76,]),'nullable':([18,49,50,79,80,81,167,],[83,117,119,131,133,135,83,]),'comp_op':([31,32,95,96,113,114,173,174,],[103,110,162,163,103,110,162,163,]),'list':([85,88,90,141,209,221,],[140,145,156,156,156,145,]),'values':([90,141,209,],[151,201,245,]),'value':([90,141,209,],[153,153,153,]),'parameters':([139,239,],[196,274,]),'parameter':([139,239,],[198,198,]),'map_values':([202,227,301,],[241,263,304,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> while_statement','statement',1,'p_statement','sintactico.py',11),
  ('statement -> for_statement','statement',1,'p_statement','sintactico.py',12),
  ('statement -> lines','statement',1,'p_statement','sintactico.py',13),
  ('statement -> LBRACE lines RBRACE','statement',3,'p_statement','sintactico.py',14),
  ('statement -> reassignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',16),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',19),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',20),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',21),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',22),
  ('assignment -> type IDENTIFIER ASSIGN expression','assignment',4,'p_assignment','sintactico.py',23),
  ('assignment -> int_assignment','assignment',1,'p_assignment','sintactico.py',24),
  ('assignment -> string_assignment','assignment',1,'p_assignment','sintactico.py',25),
  ('assignment -> list_assigment','assignment',1,'p_assignment','sintactico.py',26),
  ('assignment -> map_assigment','assignment',1,'p_assignment','sintactico.py',27),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',5,'p_int_assignment','sintactico.py',32),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic','int_assignment',4,'p_int_assignment','sintactico.py',33),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',34),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',35),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',36),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',37),
  ('int_assignment -> modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',38),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',5,'p_string_assignment','sintactico.py',44),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate','string_assignment',4,'p_string_assignment','sintactico.py',45),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',46),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',47),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',48),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',49),
  ('string_assignment -> modifier type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',50),
  ('number_type -> INTEGER_TYPE','number_type',1,'p_number_type','sintactico.py',55),
  ('number_type -> VAR','number_type',1,'p_number_type','sintactico.py',56),
  ('number_type -> DOUBLE_TYPE','number_type',1,'p_number_type','sintactico.py',57),
  ('type_string -> STRING_TYPE','type_string',1,'p_type_string','sintactico.py',61),
  ('type_string -> VAR','type_string',1,'p_type_string','sintactico.py',62),
  ('reassignment -> IDENTIFIER ASSIGN expression SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',67),
  ('reassignment -> IDENTIFIER INLINE_ARITH number SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',68),
  ('reassignment -> IDENTIFIER INLINE_ARITH SEMICOLON','reassignment',3,'p_reassignment','sintactico.py',69),
  ('reassignment -> IDENTIFIER INLINE_ARITH number','reassignment',3,'p_reassignment','sintactico.py',70),
  ('reassignment -> IDENTIFIER INLINE_ARITH','reassignment',2,'p_reassignment','sintactico.py',71),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',75),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',79),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',80),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',84),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',85),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',90),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',91),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',92),
  ('function_call -> IDENTIFIER LPAREN values RPAREN SEMICOLON','function_call',5,'p_function_call','sintactico.py',98),
  ('function_call -> IDENTIFIER LPAREN values RPAREN','function_call',4,'p_function_call','sintactico.py',99),
  ('function_call -> IDENTIFIER LPAREN RPAREN SEMICOLON','function_call',4,'p_function_call','sintactico.py',100),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','sintactico.py',101),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',105),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',106),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',107),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',108),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',109),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',110),
  ('type -> VAR','type',1,'p_type','sintactico.py',111),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',112),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',113),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',114),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',115),
  ('type -> VOID','type',1,'p_type','sintactico.py',116),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',121),
  ('expression -> concate','expression',1,'p_expression','sintactico.py',122),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',123),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',124),
  ('expression -> division','expression',1,'p_expression','sintactico.py',125),
  ('arithmetic -> number','arithmetic',1,'p_arithmetic','sintactico.py',130),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',131),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',132),
  ('division -> number DIVIDE number','division',3,'p_division','sintactico.py',139),
  ('concate -> string','concate',1,'p_concate','sintactico.py',143),
  ('concate -> concate PLUS concate','concate',3,'p_concate','sintactico.py',144),
  ('concate -> LPAREN concate PLUS concate RPAREN','concate',5,'p_concate','sintactico.py',145),
  ('comparison -> int_comparison','comparison',1,'p_comparison','sintactico.py',156),
  ('comparison -> string_comparison','comparison',1,'p_comparison','sintactico.py',157),
  ('int_comparison -> boolean','int_comparison',1,'p_int_comparison','sintactico.py',161),
  ('int_comparison -> number comp_op number','int_comparison',3,'p_int_comparison','sintactico.py',162),
  ('int_comparison -> LPAREN number comp_op number RPAREN','int_comparison',5,'p_int_comparison','sintactico.py',163),
  ('string_comparison -> boolean','string_comparison',1,'p_string_comparison','sintactico.py',168),
  ('string_comparison -> string comp_op string','string_comparison',3,'p_string_comparison','sintactico.py',169),
  ('string_comparison -> LPAREN string comp_op string RPAREN','string_comparison',5,'p_string_comparison','sintactico.py',170),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',173),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',174),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',175),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',176),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',180),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',181),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',185),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',186),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',187),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',192),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',193),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',194),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',195),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',196),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',197),
  ('values -> value','values',1,'p_values','sintactico.py',202),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',203),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',207),
  ('value -> number','value',1,'p_value','sintactico.py',208),
  ('value -> string','value',1,'p_value','sintactico.py',209),
  ('value -> list','value',1,'p_value','sintactico.py',210),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',214),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',215),
  ('string -> STRING','string',1,'p_string','sintactico.py',219),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',223),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',224),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',228),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',229),
  ('list_assigment -> IDENTIFIER ASSIGN list SEMICOLON','list_assigment',4,'p_list_assigment','sintactico.py',232),
  ('list_assigment -> type ASSIGN list SEMICOLON','list_assigment',4,'p_list_assigment','sintactico.py',233),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',239),
  ('lines -> line LINE_BREAK lines','lines',3,'p_lines','sintactico.py',243),
  ('lines -> line lines','lines',2,'p_lines','sintactico.py',244),
  ('lines -> line','lines',1,'p_lines','sintactico.py',245),
  ('lines -> LINE_BREAK','lines',1,'p_lines','sintactico.py',246),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',247),
  ('line -> print','line',1,'p_line','sintactico.py',252),
  ('line -> assignment','line',1,'p_line','sintactico.py',253),
  ('line -> function','line',1,'p_line','sintactico.py',254),
  ('line -> if_statement','line',1,'p_line','sintactico.py',255),
  ('line -> while_statement','line',1,'p_line','sintactico.py',256),
  ('line -> for_statement','line',1,'p_line','sintactico.py',257),
  ('line -> function_call','line',1,'p_line','sintactico.py',258),
  ('line -> reassignment','line',1,'p_line','sintactico.py',259),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',265),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',266),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',267),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',268),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',273),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','sintactico.py',274),
  ('map -> MAP_TYPE LESS type COMMA type GREATER','map',6,'p_map','sintactico.py',278),
  ('map -> MAP_TYPE','map',1,'p_map','sintactico.py',279),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON','map_assigment',6,'p_map_assignment','sintactico.py',283),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON','map_assigment',7,'p_map_assignment','sintactico.py',284),
  ('map_assigment -> IDENTIFIER IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON','map_assigment',7,'p_map_assignment','sintactico.py',285),
  ('map_assigment -> IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON','map_assigment',5,'p_map_assignment','sintactico.py',286),
  ('map_values -> type COLON type','map_values',3,'p_values_map','sintactico.py',289),
  ('map_values -> type COLON type COMMA map_values','map_values',5,'p_values_map','sintactico.py',290),
  ('set -> SET_TYPE LESS type GREATER','set',4,'p_set','sintactico.py',294),
  ('set -> SET_TYPE LESS type GREATER LSQUARE values RSQUARE','set',7,'p_set','sintactico.py',295),
  ('set -> SET_TYPE LESS type GREATER LSQUARE RSQUARE','set',6,'p_set','sintactico.py',296),
  ('queue -> QUEUE_TYPE LESS type GREATER','queue',4,'p_queue','sintactico.py',300),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE','queue',7,'p_queue','sintactico.py',301),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE','queue',6,'p_queue','sintactico.py',302),
  ('while_statement -> WHILE LPAREN logic RPAREN LBRACE lines RBRACE','while_statement',7,'p_while_statement','sintactico.py',306),
  ('for_statement -> FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE','for_statement',11,'p_for_statement','sintactico.py',312),
]
