
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT ASSIGN BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXTENDS FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL IDENTIFIER IF IMPLEMENTS IN INLINE_ARITH INTEGER INTEGER_TYPE LBRACE LESS LESS_EQUAL LINE_BREAK LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETURN RPAREN RSQUARE SEMICOLON SET_TYPE STRING STRING_TYPE SWITCH THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE ZERO\n    statement : expression\n              | assignment\n              | print\n              | function\n              | if_statement\n              | while_statement\n              | for_statement\n              | lines\n              | LBRACE lines RBRACE\n              | reassignment\n              | \n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression\n                    | int_assignment\n                    | string_assignment\n                    | \n                    | map_assigment\n      int_assignment :  number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type IDENTIFIER ASSIGN arithmetic\n                    | modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    | modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON\n                    \n      string_assignment : type_string IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string IDENTIFIER ASSIGN concate\n                    | modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON\n                    | modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | type_string nullable IDENTIFIER ASSIGN concate SEMICOLON\n                    | modifier type_string IDENTIFIER ASSIGN concate SEMICOLON\n                  \n     number_type : INTEGER_TYPE\n                        | VAR\n                        | DOUBLE_TYPE\n     type_string : STRING_TYPE\n                    | VAR\n    \n        reassignment : IDENTIFIER ASSIGN expression SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number SEMICOLON\n                     | IDENTIFIER INLINE_ARITH SEMICOLON\n                     | IDENTIFIER INLINE_ARITH number\n                     | IDENTIFIER INLINE_ARITH\n     nullable : QUESTION_MARK\n     modifier : FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN logic RPAREN LBRACE lines RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE lines RBRACE\n    \n    function_call : IDENTIFIER LPAREN values RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN values RPAREN\n                    | IDENTIFIER LPAREN RPAREN SEMICOLON\n                    | IDENTIFIER LPAREN RPAREN\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n            | VOID\n\n      expression : arithmetic\n                    | concate\n                    | logic\n                    | function_call\n                    | division\n     arithmetic : number\n        |   arithmetic arith_op arithmetic\n        |   LPAREN arithmetic arith_op arithmetic RPAREN\n        \n    \n    division : number DIVIDE number\n     concate : string\n        |   concate PLUS concate\n        |   LPAREN concate PLUS concate RPAREN\n     comparison : int_comparison\n        |   string_comparison\n     int_comparison : boolean\n        |   number comp_op number\n        |   LPAREN number comp_op number RPAREN\n     string_comparison : boolean\n        |   string comp_op string\n        |   LPAREN string comp_op string RPAREN\n     logic : comparison\n        |   logic logic_op logic\n        |   LPAREN logic logic_op logic RPAREN\n        |   LOGICAL_NOT logic\n     logic_op : LOGICAL_AND\n        |   LOGICAL_OR\n     arith_op : PLUS\n        |   MINUS\n        |   TIMES\n    \n      comp_op : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | number\n         | string\n         | list\n  number : INTEGER \n                | DOUBLE\n      string : STRING\n     boolean : TRUE\n                | FALSE\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE\n     lines : line LINE_BREAK lines\n            | line lines\n            | line\n            | LINE_BREAK\n            |\n\n     line : print\n            | assignment\n            | function\n            | if_statement\n            | while_statement\n            | for_statement\n            | function_call\n            | reassignment\n            \n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n            | IDENTIFIER \n  \n    map : MAP_TYPE LESS type COMMA type GREATER\n        | MAP_TYPE\n\n    \n    map_assigment : map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON\n                |   map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON\n    map_values : type COLON type\n                 |  type COLON type COMMA map_values\n    \n    set : SET_TYPE LESS type GREATER\n        | SET_TYPE LESS type GREATER LSQUARE values RSQUARE\n        | SET_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    queue : QUEUE_TYPE LESS type GREATER\n          | QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE\n          | QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE\n    \n    while_statement : WHILE LPAREN logic RPAREN LBRACE lines RBRACE\n    \n    for_statement : FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE\n    '
    
_lr_action_items = {'LBRACE':([0,59,176,205,206,225,284,],[10,119,214,236,237,258,286,]),'$end':([0,1,2,3,4,5,6,7,8,9,11,12,13,14,15,16,20,21,22,28,29,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,97,98,108,118,120,121,122,124,125,127,139,140,141,144,161,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,240,243,250,253,256,257,264,265,266,267,268,271,272,273,274,275,277,278,281,283,289,],[-11,0,-1,-2,-3,-4,-5,-6,-7,-8,-10,-69,-70,-71,-72,-73,-17,-18,-20,-19,-121,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,-19,-119,-92,-51,-9,-75,-74,-79,-78,-90,-72,-43,-42,-56,-118,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,-21,-28,-14,-27,-34,-13,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,-150,]),'LINE_BREAK':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[29,-124,-123,-125,-126,-127,-128,29,-130,-69,-70,-71,-129,-73,-17,-18,-20,97,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,29,-92,-51,29,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,29,29,-21,-28,-14,-27,-34,-13,29,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,29,-150,]),'PRINT':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[23,-124,-123,-125,-126,-127,-128,23,-130,-69,-70,-71,-129,-73,-17,-18,-20,23,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,23,-92,-51,23,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,23,23,-21,-28,-14,-27,-34,-13,23,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,23,-150,]),'IF':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,86,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[25,-124,-123,-125,-126,-127,-128,25,-130,-69,-70,-71,-129,-73,-17,-18,-20,25,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,25,-123,-124,-125,-126,-127,-128,-129,-130,-44,25,-92,-51,25,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,25,25,-21,-28,-14,-27,-34,-13,25,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,25,-150,]),'WHILE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[26,-124,-123,-125,-126,-127,-128,26,-130,-69,-70,-71,-129,-73,-17,-18,-20,26,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,26,-92,-51,26,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,26,26,-21,-28,-14,-27,-34,-13,26,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,26,-150,]),'FOR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[27,-124,-123,-125,-126,-127,-128,27,-130,-69,-70,-71,-129,-73,-17,-18,-20,27,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,27,-92,-51,27,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,27,27,-21,-28,-14,-27,-34,-13,27,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,27,-150,]),'IDENTIFIER':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,18,20,21,22,28,30,31,32,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,78,79,80,81,82,84,85,86,87,88,97,108,114,116,118,119,121,122,124,125,127,128,130,132,135,136,139,140,141,144,149,160,162,163,164,168,169,170,171,179,184,185,186,189,191,192,193,194,195,199,210,212,215,216,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,262,263,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[19,-124,-123,-125,-126,-127,-128,69,-130,-69,-70,-71,-129,-73,83,-17,-18,-20,69,-74,-78,-89,-35,-37,-59,-60,-38,-62,-36,-64,-65,-66,-67,-68,113,115,117,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,129,131,133,-65,134,-45,137,-44,142,137,69,-92,173,175,-51,69,-75,-74,-79,-78,-90,178,180,182,137,187,-72,-43,-42,-56,142,208,-77,-84,-87,-57,-58,-61,-63,137,137,-16,224,-68,-40,-41,-54,-55,142,-49,-22,-29,-52,137,-15,187,-53,-48,-76,-80,-91,-85,-88,69,69,-21,-28,-14,-27,-34,-13,69,280,-137,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,69,-150,]),'FINAL':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[34,-124,-123,-125,-126,-127,-128,34,-130,-69,-70,-71,-129,-73,-17,-18,-20,34,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,34,34,-92,-51,34,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,34,34,-21,-28,-14,-27,-34,-13,34,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,34,-150,]),'CONST':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,20,21,22,28,30,31,32,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,118,119,121,122,124,125,127,139,140,141,144,162,163,164,185,191,192,193,194,199,210,212,215,223,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,271,272,273,274,275,277,278,281,283,286,289,],[35,-124,-123,-125,-126,-127,-128,35,-130,-69,-70,-71,-129,-73,-17,-18,-20,35,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,35,35,-92,-51,35,-75,-74,-79,-78,-90,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,-22,-29,-52,-15,-53,-48,-76,-80,-91,-85,-88,35,35,-21,-28,-14,-27,-34,-13,35,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,-50,-149,-140,-117,35,-150,]),'INTEGER_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[36,-124,-123,-125,-126,-127,-128,36,-130,-69,-70,-71,-129,-73,36,-17,-18,-20,36,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,36,36,-92,168,-51,36,-75,-74,-79,-78,-90,168,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,168,-22,-29,168,-52,-15,168,-53,-48,-76,-80,-91,-85,-88,36,36,-21,-28,-14,-27,-34,-13,36,-24,-26,-31,-33,-139,168,-12,-23,-25,-30,-32,-50,-149,-140,-117,168,36,-150,]),'DOUBLE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[37,-124,-123,-125,-126,-127,-128,37,-130,-69,-70,-71,-129,-73,37,-17,-18,-20,37,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,37,37,-92,169,-51,37,-75,-74,-79,-78,-90,169,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,169,-22,-29,169,-52,-15,169,-53,-48,-76,-80,-91,-85,-88,37,37,-21,-28,-14,-27,-34,-13,37,-24,-26,-31,-33,-139,169,-12,-23,-25,-30,-32,-50,-149,-140,-117,169,37,-150,]),'BOOLEAN_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[38,-124,-123,-125,-126,-127,-128,38,-130,-69,-70,-71,-129,-73,38,-17,-18,-20,38,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,38,38,-92,38,-51,38,-75,-74,-79,-78,-90,38,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,38,-22,-29,38,-52,-15,38,-53,-48,-76,-80,-91,-85,-88,38,38,-21,-28,-14,-27,-34,-13,38,-24,-26,-31,-33,-139,38,-12,-23,-25,-30,-32,-50,-149,-140,-117,38,38,-150,]),'QUEUE_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[39,-124,-123,-125,-126,-127,-128,39,-130,-69,-70,-71,-129,-73,39,-17,-18,-20,39,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,39,39,-92,39,-51,39,-75,-74,-79,-78,-90,39,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,39,-22,-29,39,-52,-15,39,-53,-48,-76,-80,-91,-85,-88,39,39,-21,-28,-14,-27,-34,-13,39,-24,-26,-31,-33,-139,39,-12,-23,-25,-30,-32,-50,-149,-140,-117,39,39,-150,]),'STRING_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[40,-124,-123,-125,-126,-127,-128,40,-130,-69,-70,-71,-129,-73,40,-17,-18,-20,40,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,40,40,-92,170,-51,40,-75,-74,-79,-78,-90,170,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,170,-22,-29,170,-52,-15,170,-53,-48,-76,-80,-91,-85,-88,40,40,-21,-28,-14,-27,-34,-13,40,-24,-26,-31,-33,-139,170,-12,-23,-25,-30,-32,-50,-149,-140,-117,170,40,-150,]),'ENUM_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[41,-124,-123,-125,-126,-127,-128,41,-130,-69,-70,-71,-129,-73,41,-17,-18,-20,41,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,41,41,-92,41,-51,41,-75,-74,-79,-78,-90,41,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,41,-22,-29,41,-52,-15,41,-53,-48,-76,-80,-91,-85,-88,41,41,-21,-28,-14,-27,-34,-13,41,-24,-26,-31,-33,-139,41,-12,-23,-25,-30,-32,-50,-149,-140,-117,41,41,-150,]),'VAR':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[42,-124,-123,-125,-126,-127,-128,42,-130,-69,-70,-71,-129,-73,42,-17,-18,-20,42,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,42,42,-92,171,-51,42,-75,-74,-79,-78,-90,171,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,171,-22,-29,171,-52,-15,171,-53,-48,-76,-80,-91,-85,-88,42,42,-21,-28,-14,-27,-34,-13,42,-24,-26,-31,-33,-139,171,-12,-23,-25,-30,-32,-50,-149,-140,-117,171,42,-150,]),'LIST_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[43,-124,-123,-125,-126,-127,-128,43,-130,-69,-70,-71,-129,-73,43,-17,-18,-20,43,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,43,43,-92,43,-51,43,-75,-74,-79,-78,-90,43,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,43,-22,-29,43,-52,-15,43,-53,-48,-76,-80,-91,-85,-88,43,43,-21,-28,-14,-27,-34,-13,43,-24,-26,-31,-33,-139,43,-12,-23,-25,-30,-32,-50,-149,-140,-117,43,43,-150,]),'MAP_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[44,-124,-123,-125,-126,-127,-128,44,-130,-69,-70,-71,-129,-73,81,-17,-18,-20,44,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,44,44,-92,81,-51,44,-75,-74,-79,-78,-90,81,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,81,-22,-29,81,-52,-15,81,-53,-48,-76,-80,-91,-85,-88,44,44,-21,-28,-14,-27,-34,-13,44,-24,-26,-31,-33,-139,81,-12,-23,-25,-30,-32,-50,-149,-140,-117,81,44,-150,]),'SET_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[45,-124,-123,-125,-126,-127,-128,45,-130,-69,-70,-71,-129,-73,45,-17,-18,-20,45,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,45,45,-92,45,-51,45,-75,-74,-79,-78,-90,45,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,45,-22,-29,45,-52,-15,45,-53,-48,-76,-80,-91,-85,-88,45,45,-21,-28,-14,-27,-34,-13,45,-24,-26,-31,-33,-139,45,-12,-23,-25,-30,-32,-50,-149,-140,-117,45,45,-150,]),'DYNAMIC_TYPE':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[46,-124,-123,-125,-126,-127,-128,46,-130,-69,-70,-71,-129,-73,46,-17,-18,-20,46,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,46,46,-92,46,-51,46,-75,-74,-79,-78,-90,46,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,46,-22,-29,46,-52,-15,46,-53,-48,-76,-80,-91,-85,-88,46,46,-21,-28,-14,-27,-34,-13,46,-24,-26,-31,-33,-139,46,-12,-23,-25,-30,-32,-50,-149,-140,-117,46,46,-150,]),'VOID':([0,3,4,5,6,7,8,10,11,12,13,14,15,16,17,20,21,22,28,30,31,32,34,35,51,52,53,54,55,56,57,58,61,62,63,64,65,66,67,68,86,96,97,108,112,118,119,121,122,124,125,127,136,139,140,141,144,162,163,164,185,191,192,193,194,199,209,210,212,214,215,223,226,227,230,231,232,233,234,235,236,237,240,243,250,253,256,257,258,264,265,266,267,268,270,271,272,273,274,275,277,278,281,283,285,286,289,],[47,-124,-123,-125,-126,-127,-128,47,-130,-69,-70,-71,-129,-73,47,-17,-18,-20,47,-74,-78,-89,-46,-47,-110,-111,-112,-81,-82,-83,-113,-114,-123,-124,-125,-126,-127,-128,-129,-130,-44,47,47,-92,47,-51,47,-75,-74,-79,-78,-90,189,-72,-43,-42,-56,-77,-84,-87,-16,-40,-41,-54,-55,-49,47,-22,-29,47,-52,-15,189,-53,-48,-76,-80,-91,-85,-88,47,47,-21,-28,-14,-27,-34,-13,47,-24,-26,-31,-33,-139,47,-12,-23,-25,-30,-32,-50,-149,-140,-117,47,47,-150,]),'LPAREN':([0,19,23,24,25,26,27,33,69,70,71,72,73,74,75,76,77,83,85,88,94,95,109,123,126,135,137,152,153,154,172,174,179,181,183,184,207,211,213,216,218,220,],[24,87,88,24,94,95,96,109,87,123,-95,-96,-97,126,109,-93,-94,136,24,24,109,109,109,123,126,24,87,123,126,109,123,126,24,123,126,24,109,123,126,24,123,126,]),'LOGICAL_NOT':([0,24,33,75,76,77,85,88,94,95,109,135,154,179,184,207,216,],[33,33,33,33,-93,-94,33,33,33,33,33,33,33,33,33,33,33,]),'INTEGER':([0,24,33,70,71,72,73,75,76,77,85,86,87,88,94,95,99,100,101,102,103,104,105,106,109,123,135,149,152,154,155,172,179,181,184,195,207,211,216,218,],[51,51,51,51,-95,-96,-97,51,-93,-94,51,51,51,51,51,51,51,51,-98,-99,-100,-101,-102,-103,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'DOUBLE':([0,24,33,70,71,72,73,75,76,77,85,86,87,88,94,95,99,100,101,102,103,104,105,106,109,123,135,149,152,154,155,172,179,181,184,195,207,211,216,218,],[52,52,52,52,-95,-96,-97,52,-93,-94,52,52,52,52,52,52,52,52,-98,-99,-100,-101,-102,-103,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'STRING':([0,24,33,74,75,76,77,85,87,88,94,95,101,102,103,104,105,106,107,109,126,135,149,153,154,156,174,179,183,184,195,207,213,216,220,],[53,53,53,53,53,-93,-94,53,53,53,53,53,-98,-99,-100,-101,-102,-103,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'TRUE':([0,24,33,75,76,77,85,88,94,95,109,135,154,179,184,207,216,],[57,57,57,57,-93,-94,57,57,57,57,57,57,57,57,57,57,57,]),'FALSE':([0,24,33,75,76,77,85,88,94,95,109,135,154,179,184,207,216,],[58,58,58,58,-93,-94,58,58,58,58,58,58,58,58,58,58,58,]),'ELSE':([6,64,118,215,277,],[59,59,59,-52,-50,]),'RBRACE':([10,12,13,14,16,20,21,22,28,29,30,31,32,38,39,41,43,45,46,47,51,52,53,54,55,56,57,58,60,61,62,63,64,65,66,67,68,81,86,97,98,108,118,119,121,122,124,125,127,139,140,141,144,161,162,163,164,168,169,170,171,177,185,191,192,193,194,199,210,212,214,215,223,227,230,231,232,233,234,235,236,237,240,243,247,250,253,256,257,258,260,261,264,265,266,267,268,271,272,273,274,275,276,277,278,281,282,283,286,287,288,289,],[-19,-69,-70,-71,-73,-17,-18,-20,-19,-121,-74,-78,-89,-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-81,-82,-83,-113,-114,120,-123,-124,-125,-126,-127,-128,-129,-130,-65,-44,-19,-119,-92,-51,-19,-75,-74,-79,-78,-90,-72,-43,-42,-56,-118,-77,-84,-87,-57,-58,-61,-63,215,-16,-40,-41,-54,-55,-49,-22,-29,246,-52,-15,-53,-48,-76,-80,-91,-85,-88,-19,-19,-21,-28,269,-14,-27,-34,-13,-19,277,278,-24,-26,-31,-33,-139,-12,-23,-25,-30,-32,283,-50,-149,-140,-141,-117,-19,-142,289,-150,]),'SEMICOLON':([12,13,14,16,20,21,22,30,31,32,51,52,53,54,55,56,57,58,86,96,108,121,122,124,125,127,138,139,140,144,151,159,162,163,164,185,193,194,198,210,212,217,219,221,222,223,227,231,232,233,234,235,238,240,241,242,243,244,245,246,249,250,251,252,253,254,255,256,257,264,265,266,267,268,269,271,272,273,274,275,281,],[-69,-70,-71,-73,-17,-18,-20,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,141,-19,-92,-75,-74,-79,-78,-90,191,-72,192,194,199,207,-77,-84,-87,223,227,-55,230,240,243,250,253,256,257,-15,-53,-76,-80,-91,-85,-88,262,-21,264,265,-28,266,267,268,271,-14,272,273,-27,274,275,-34,-13,-24,-26,-31,-33,-139,281,-12,-23,-25,-30,-32,-140,]),'RPAREN':([12,13,14,16,30,31,32,51,52,53,54,55,56,57,58,86,87,88,108,121,122,124,125,127,136,139,140,141,142,143,144,145,146,147,148,150,157,158,162,163,164,187,188,189,190,191,192,193,194,196,200,201,202,203,204,224,226,227,228,229,231,232,233,234,235,259,279,],[-69,-70,-71,-73,-74,-78,-89,-110,-111,-112,-81,-82,-83,-113,-114,-44,144,151,-92,-75,-74,-79,-78,-90,-134,-72,-43,-42,-106,193,-56,-104,-107,-108,-109,198,205,206,-77,-84,-87,-136,225,-131,-132,-40,-41,-54,-55,-115,231,232,233,234,235,-135,-134,-53,-105,-116,-76,-80,-91,-85,-88,-133,284,]),'PLUS':([12,13,30,31,51,52,53,89,90,92,93,121,122,124,125,200,201,210,212,219,221,231,232,242,245,252,255,],[71,74,-74,-78,-110,-111,-112,71,153,-74,-78,71,-74,74,-78,71,74,71,74,71,74,-76,-80,71,74,71,74,]),'MINUS':([12,30,51,52,89,92,121,122,200,210,219,231,242,252,],[72,-74,-110,-111,72,-74,72,-74,72,72,72,-76,72,72,]),'TIMES':([12,30,51,52,89,92,121,122,200,210,219,231,242,252,],[73,-74,-110,-111,73,-74,73,-74,73,73,73,-76,73,73,]),'LOGICAL_AND':([14,32,51,52,53,54,55,56,57,58,91,108,127,157,158,163,164,202,203,204,233,234,235,238,],[76,-89,-110,-111,-112,-81,-82,-83,-113,-114,76,76,76,76,76,-84,-87,76,-84,-87,-91,-85,-88,76,]),'LOGICAL_OR':([14,32,51,52,53,54,55,56,57,58,91,108,127,157,158,163,164,202,203,204,233,234,235,238,],[77,-89,-110,-111,-112,-81,-82,-83,-113,-114,77,77,77,77,77,-84,-87,77,-84,-87,-91,-85,-88,77,]),'QUESTION_MARK':([18,36,37,38,39,40,41,42,43,44,45,46,47,48,49,78,79,80,81,160,],[84,-35,-37,-59,-60,-38,-62,-36,-64,-65,-66,-67,-68,84,84,84,84,84,-65,84,]),'ASSIGN':([19,69,83,113,115,117,129,131,133,134,173,175,178,180,182,208,280,],[85,85,135,172,174,176,179,181,183,184,211,213,216,218,220,135,85,]),'INLINE_ARITH':([19,69,280,],[86,86,86,]),'DIVIDE':([30,51,52,],[99,-110,-111,]),'EQUAL':([30,31,51,52,53,92,93,110,111,165,166,],[101,101,-110,-111,-112,101,101,101,101,101,101,]),'NOT_EQUAL':([30,31,51,52,53,92,93,110,111,165,166,],[102,102,-110,-111,-112,102,102,102,102,102,102,]),'LESS':([30,31,44,51,52,53,92,93,110,111,165,166,],[103,103,112,-110,-111,-112,103,103,103,103,103,103,]),'LESS_EQUAL':([30,31,51,52,53,92,93,110,111,165,166,],[104,104,-110,-111,-112,104,104,104,104,104,104,]),'GREATER':([30,31,38,39,41,43,45,46,47,51,52,53,81,92,93,110,111,165,166,168,169,170,171,239,],[105,105,-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-65,105,105,105,105,105,105,-57,-58,-61,-63,263,]),'GREATER_EQUAL':([30,31,51,52,53,92,93,110,111,165,166,],[106,106,-110,-111,-112,106,106,106,106,106,106,]),'COMMA':([38,39,41,43,45,46,47,51,52,53,81,142,145,146,147,148,167,168,169,170,171,187,190,196,224,229,282,],[-59,-60,-62,-64,-66,-67,-68,-110,-111,-112,-65,-106,195,-107,-108,-109,209,-57,-58,-61,-63,-136,226,-115,-135,-116,285,]),'COLON':([38,39,41,43,45,46,47,81,168,169,170,171,248,],[-59,-60,-62,-64,-66,-67,-68,-65,-57,-58,-61,-63,270,]),'RSQUARE':([51,52,53,142,145,146,147,148,149,196,197,228,229,],[-110,-111,-112,-106,-104,-107,-108,-109,196,-115,229,-105,-116,]),'LSQUARE':([87,149,195,],[149,149,149,]),'NULL':([211,213,218,220,],[241,244,251,254,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,85,88,135,179,184,216,],[2,138,150,185,217,222,249,]),'assignment':([0,10,28,96,97,119,236,237,258,286,],[3,62,62,159,62,62,62,62,62,62,]),'print':([0,10,28,97,119,236,237,258,286,],[4,61,61,61,61,61,61,61,61,]),'function':([0,10,28,97,119,236,237,258,286,],[5,63,63,63,63,63,63,63,63,]),'if_statement':([0,10,28,59,97,119,236,237,258,286,],[6,64,64,118,64,64,64,64,64,64,]),'while_statement':([0,10,28,97,119,236,237,258,286,],[7,65,65,65,65,65,65,65,65,]),'for_statement':([0,10,28,97,119,236,237,258,286,],[8,66,66,66,66,66,66,66,66,]),'lines':([0,10,28,97,119,236,237,258,286,],[9,60,98,161,177,260,261,276,288,]),'reassignment':([0,10,28,97,119,236,237,258,262,286,],[11,68,68,68,68,68,68,68,279,68,]),'arithmetic':([0,24,70,85,88,123,135,152,172,179,181,184,211,216,218,],[12,89,121,12,12,89,12,200,210,12,219,12,242,12,252,]),'concate':([0,24,74,85,88,126,135,153,174,179,183,184,213,216,220,],[13,90,124,13,13,90,13,201,212,13,221,13,245,13,255,]),'logic':([0,24,33,75,85,88,94,95,109,135,154,179,184,207,216,],[14,91,108,127,14,14,157,158,91,14,202,14,14,238,14,]),'function_call':([0,10,28,85,88,97,119,135,179,184,216,236,237,258,286,],[15,67,67,139,139,67,67,139,139,139,139,67,67,67,67,]),'division':([0,85,88,135,179,184,216,],[16,16,16,16,16,16,16,]),'modifier':([0,10,28,96,97,119,236,237,258,286,],[17,17,17,17,17,17,17,17,17,17,]),'type':([0,10,17,28,96,97,112,119,136,209,214,226,236,237,258,270,285,286,],[18,18,78,18,160,18,167,18,186,239,248,186,18,18,18,282,248,18,]),'int_assignment':([0,10,28,96,97,119,236,237,258,286,],[20,20,20,20,20,20,20,20,20,20,]),'string_assignment':([0,10,28,96,97,119,236,237,258,286,],[21,21,21,21,21,21,21,21,21,21,]),'map_assigment':([0,10,28,96,97,119,236,237,258,286,],[22,22,22,22,22,22,22,22,22,22,]),'line':([0,10,28,97,119,236,237,258,286,],[28,28,28,28,28,28,28,28,28,]),'number':([0,24,33,70,75,85,86,87,88,94,95,99,100,109,123,135,149,152,154,155,172,179,181,184,195,207,211,216,218,],[30,92,110,122,110,30,140,146,30,110,110,162,163,165,122,30,146,122,110,203,122,30,122,30,146,110,122,30,122,]),'string':([0,24,33,74,75,85,87,88,94,95,107,109,126,135,149,153,154,156,174,179,183,184,195,207,213,216,220,],[31,93,111,125,111,31,147,31,111,111,164,166,125,31,147,125,111,204,125,31,125,31,147,111,125,31,125,]),'comparison':([0,24,33,75,85,88,94,95,109,135,154,179,184,207,216,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'number_type':([0,10,17,28,96,97,119,236,237,258,286,],[48,48,79,48,48,48,48,48,48,48,48,]),'type_string':([0,10,17,28,96,97,119,236,237,258,286,],[49,49,80,49,49,49,49,49,49,49,49,]),'map':([0,10,28,96,97,119,236,237,258,286,],[50,50,50,50,50,50,50,50,50,50,]),'int_comparison':([0,24,33,75,85,88,94,95,109,135,154,179,184,207,216,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'string_comparison':([0,24,33,75,85,88,94,95,109,135,154,179,184,207,216,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'boolean':([0,24,33,75,85,88,94,95,109,135,154,179,184,207,216,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'arith_op':([12,89,121,200,210,219,242,252,],[70,152,70,70,70,70,70,70,]),'logic_op':([14,91,108,127,157,158,202,238,],[75,154,75,75,75,75,75,75,]),'nullable':([18,48,49,78,79,80,160,],[82,114,116,128,130,132,82,]),'comp_op':([30,31,92,93,110,111,165,166,],[100,107,155,156,100,107,155,156,]),'values':([87,149,195,],[143,197,228,]),'value':([87,149,195,],[145,145,145,]),'list':([87,149,195,],[148,148,148,]),'parameters':([136,226,],[188,259,]),'parameter':([136,226,],[190,190,]),'map_values':([214,285,],[247,287,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> while_statement','statement',1,'p_statement','sintactico.py',11),
  ('statement -> for_statement','statement',1,'p_statement','sintactico.py',12),
  ('statement -> lines','statement',1,'p_statement','sintactico.py',13),
  ('statement -> LBRACE lines RBRACE','statement',3,'p_statement','sintactico.py',14),
  ('statement -> reassignment','statement',1,'p_statement','sintactico.py',15),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',16),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',19),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',20),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',21),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',22),
  ('assignment -> type IDENTIFIER ASSIGN expression','assignment',4,'p_assignment','sintactico.py',23),
  ('assignment -> int_assignment','assignment',1,'p_assignment','sintactico.py',24),
  ('assignment -> string_assignment','assignment',1,'p_assignment','sintactico.py',25),
  ('assignment -> <empty>','assignment',0,'p_assignment','sintactico.py',26),
  ('assignment -> map_assigment','assignment',1,'p_assignment','sintactico.py',27),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',5,'p_int_assignment','sintactico.py',32),
  ('int_assignment -> number_type IDENTIFIER ASSIGN arithmetic','int_assignment',4,'p_int_assignment','sintactico.py',33),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',34),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN NULL SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',35),
  ('int_assignment -> modifier number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',7,'p_int_assignment','sintactico.py',36),
  ('int_assignment -> number_type nullable IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',37),
  ('int_assignment -> modifier number_type IDENTIFIER ASSIGN arithmetic SEMICOLON','int_assignment',6,'p_int_assignment','sintactico.py',38),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',5,'p_string_assignment','sintactico.py',44),
  ('string_assignment -> type_string IDENTIFIER ASSIGN concate','string_assignment',4,'p_string_assignment','sintactico.py',45),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',46),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN NULL SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',47),
  ('string_assignment -> modifier type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',7,'p_string_assignment','sintactico.py',48),
  ('string_assignment -> type_string nullable IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',49),
  ('string_assignment -> modifier type_string IDENTIFIER ASSIGN concate SEMICOLON','string_assignment',6,'p_string_assignment','sintactico.py',50),
  ('number_type -> INTEGER_TYPE','number_type',1,'p_number_type','sintactico.py',55),
  ('number_type -> VAR','number_type',1,'p_number_type','sintactico.py',56),
  ('number_type -> DOUBLE_TYPE','number_type',1,'p_number_type','sintactico.py',57),
  ('type_string -> STRING_TYPE','type_string',1,'p_type_string','sintactico.py',61),
  ('type_string -> VAR','type_string',1,'p_type_string','sintactico.py',62),
  ('reassignment -> IDENTIFIER ASSIGN expression SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',67),
  ('reassignment -> IDENTIFIER INLINE_ARITH number SEMICOLON','reassignment',4,'p_reassignment','sintactico.py',68),
  ('reassignment -> IDENTIFIER INLINE_ARITH SEMICOLON','reassignment',3,'p_reassignment','sintactico.py',69),
  ('reassignment -> IDENTIFIER INLINE_ARITH number','reassignment',3,'p_reassignment','sintactico.py',70),
  ('reassignment -> IDENTIFIER INLINE_ARITH','reassignment',2,'p_reassignment','sintactico.py',71),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',75),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',79),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',80),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',84),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',85),
  ('if_statement -> IF LPAREN logic RPAREN LBRACE lines RBRACE','if_statement',7,'p_if_statement','sintactico.py',90),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',91),
  ('if_statement -> if_statement ELSE LBRACE lines RBRACE','if_statement',5,'p_if_statement','sintactico.py',92),
  ('function_call -> IDENTIFIER LPAREN values RPAREN SEMICOLON','function_call',5,'p_function_call','sintactico.py',98),
  ('function_call -> IDENTIFIER LPAREN values RPAREN','function_call',4,'p_function_call','sintactico.py',99),
  ('function_call -> IDENTIFIER LPAREN RPAREN SEMICOLON','function_call',4,'p_function_call','sintactico.py',100),
  ('function_call -> IDENTIFIER LPAREN RPAREN','function_call',3,'p_function_call','sintactico.py',101),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',105),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',106),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',107),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',108),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',109),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',110),
  ('type -> VAR','type',1,'p_type','sintactico.py',111),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',112),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',113),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',114),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',115),
  ('type -> VOID','type',1,'p_type','sintactico.py',116),
  ('expression -> arithmetic','expression',1,'p_expression','sintactico.py',121),
  ('expression -> concate','expression',1,'p_expression','sintactico.py',122),
  ('expression -> logic','expression',1,'p_expression','sintactico.py',123),
  ('expression -> function_call','expression',1,'p_expression','sintactico.py',124),
  ('expression -> division','expression',1,'p_expression','sintactico.py',125),
  ('arithmetic -> number','arithmetic',1,'p_arithmetic','sintactico.py',130),
  ('arithmetic -> arithmetic arith_op arithmetic','arithmetic',3,'p_arithmetic','sintactico.py',131),
  ('arithmetic -> LPAREN arithmetic arith_op arithmetic RPAREN','arithmetic',5,'p_arithmetic','sintactico.py',132),
  ('division -> number DIVIDE number','division',3,'p_division','sintactico.py',139),
  ('concate -> string','concate',1,'p_concate','sintactico.py',143),
  ('concate -> concate PLUS concate','concate',3,'p_concate','sintactico.py',144),
  ('concate -> LPAREN concate PLUS concate RPAREN','concate',5,'p_concate','sintactico.py',145),
  ('comparison -> int_comparison','comparison',1,'p_comparison','sintactico.py',156),
  ('comparison -> string_comparison','comparison',1,'p_comparison','sintactico.py',157),
  ('int_comparison -> boolean','int_comparison',1,'p_int_comparison','sintactico.py',161),
  ('int_comparison -> number comp_op number','int_comparison',3,'p_int_comparison','sintactico.py',162),
  ('int_comparison -> LPAREN number comp_op number RPAREN','int_comparison',5,'p_int_comparison','sintactico.py',163),
  ('string_comparison -> boolean','string_comparison',1,'p_string_comparison','sintactico.py',168),
  ('string_comparison -> string comp_op string','string_comparison',3,'p_string_comparison','sintactico.py',169),
  ('string_comparison -> LPAREN string comp_op string RPAREN','string_comparison',5,'p_string_comparison','sintactico.py',170),
  ('logic -> comparison','logic',1,'p_logic','sintactico.py',173),
  ('logic -> logic logic_op logic','logic',3,'p_logic','sintactico.py',174),
  ('logic -> LPAREN logic logic_op logic RPAREN','logic',5,'p_logic','sintactico.py',175),
  ('logic -> LOGICAL_NOT logic','logic',2,'p_logic','sintactico.py',176),
  ('logic_op -> LOGICAL_AND','logic_op',1,'p_logic_op','sintactico.py',180),
  ('logic_op -> LOGICAL_OR','logic_op',1,'p_logic_op','sintactico.py',181),
  ('arith_op -> PLUS','arith_op',1,'p_arith_op','sintactico.py',185),
  ('arith_op -> MINUS','arith_op',1,'p_arith_op','sintactico.py',186),
  ('arith_op -> TIMES','arith_op',1,'p_arith_op','sintactico.py',187),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','sintactico.py',192),
  ('comp_op -> NOT_EQUAL','comp_op',1,'p_comp_op','sintactico.py',193),
  ('comp_op -> LESS','comp_op',1,'p_comp_op','sintactico.py',194),
  ('comp_op -> LESS_EQUAL','comp_op',1,'p_comp_op','sintactico.py',195),
  ('comp_op -> GREATER','comp_op',1,'p_comp_op','sintactico.py',196),
  ('comp_op -> GREATER_EQUAL','comp_op',1,'p_comp_op','sintactico.py',197),
  ('values -> value','values',1,'p_values','sintactico.py',202),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',203),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',207),
  ('value -> number','value',1,'p_value','sintactico.py',208),
  ('value -> string','value',1,'p_value','sintactico.py',209),
  ('value -> list','value',1,'p_value','sintactico.py',210),
  ('number -> INTEGER','number',1,'p_number','sintactico.py',214),
  ('number -> DOUBLE','number',1,'p_number','sintactico.py',215),
  ('string -> STRING','string',1,'p_string','sintactico.py',219),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',223),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',224),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',228),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',229),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE lines RBRACE','function',8,'p_function','sintactico.py',235),
  ('lines -> line LINE_BREAK lines','lines',3,'p_lines','sintactico.py',239),
  ('lines -> line lines','lines',2,'p_lines','sintactico.py',240),
  ('lines -> line','lines',1,'p_lines','sintactico.py',241),
  ('lines -> LINE_BREAK','lines',1,'p_lines','sintactico.py',242),
  ('lines -> <empty>','lines',0,'p_lines','sintactico.py',243),
  ('line -> print','line',1,'p_line','sintactico.py',248),
  ('line -> assignment','line',1,'p_line','sintactico.py',249),
  ('line -> function','line',1,'p_line','sintactico.py',250),
  ('line -> if_statement','line',1,'p_line','sintactico.py',251),
  ('line -> while_statement','line',1,'p_line','sintactico.py',252),
  ('line -> for_statement','line',1,'p_line','sintactico.py',253),
  ('line -> function_call','line',1,'p_line','sintactico.py',254),
  ('line -> reassignment','line',1,'p_line','sintactico.py',255),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',261),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',262),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',263),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',264),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',269),
  ('parameter -> IDENTIFIER','parameter',1,'p_parameter','sintactico.py',270),
  ('map -> MAP_TYPE LESS type COMMA type GREATER','map',6,'p_map','sintactico.py',274),
  ('map -> MAP_TYPE','map',1,'p_map','sintactico.py',275),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE RBRACE SEMICOLON','map_assigment',6,'p_map_assignment','sintactico.py',280),
  ('map_assigment -> map IDENTIFIER ASSIGN LBRACE map_values RBRACE SEMICOLON','map_assigment',7,'p_map_assignment','sintactico.py',281),
  ('map_values -> type COLON type','map_values',3,'p_values_map','sintactico.py',284),
  ('map_values -> type COLON type COMMA map_values','map_values',5,'p_values_map','sintactico.py',285),
  ('set -> SET_TYPE LESS type GREATER','set',4,'p_set','sintactico.py',289),
  ('set -> SET_TYPE LESS type GREATER LSQUARE values RSQUARE','set',7,'p_set','sintactico.py',290),
  ('set -> SET_TYPE LESS type GREATER LSQUARE RSQUARE','set',6,'p_set','sintactico.py',291),
  ('queue -> QUEUE_TYPE LESS type GREATER','queue',4,'p_queue','sintactico.py',295),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE values RSQUARE','queue',7,'p_queue','sintactico.py',296),
  ('queue -> QUEUE_TYPE LESS type GREATER LSQUARE RSQUARE','queue',6,'p_queue','sintactico.py',297),
  ('while_statement -> WHILE LPAREN logic RPAREN LBRACE lines RBRACE','while_statement',7,'p_while_statement','sintactico.py',301),
  ('for_statement -> FOR LPAREN assignment SEMICOLON logic SEMICOLON reassignment RPAREN LBRACE lines RBRACE','for_statement',11,'p_for_statement','sintactico.py',307),
]
