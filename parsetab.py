
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AS ASSERT ASSIGN ASYNC AWAIT BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DEFERRED DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXPORT EXTENDS EXTENSION EXTERNAL FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL HIDE IDENTIFIER IF IMPLEMENTS IMPORT IN INTEGER INTEGER_TYPE INTERFACE IS KEYWORD LATE LBRACE LESS LESS_EQUAL LIBRARY LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL ON OPERATOR PART PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETHROW RETURN RPAREN RSQUARE SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUPER SWITCH SYNC THROW TIMES TRUE TRY TYPEDEF VAR VOID WHILE WITH YIELD\n statement : expression\n           | assignment\n           | print\n           | function\n           | if_statement\n           |\n   assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | type nullable IDENTIFIER ASSIGN expression SEMICOLON\n                    | modifier type IDENTIFIER ASSIGN expression SEMICOLON\n                    | type IDENTIFIER ASSIGN expression SEMICOLON\n     nullable : QUESTION_MARK\n     modifier : LATE\n                | FINAL\n                | CONST\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n                | PRINT LPAREN RPAREN SEMICOLON\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE statement RBRACE\n                 | if_statement ELSE if_statement\n                 | if_statement ELSE LBRACE statement RBRACE\n     type : INTEGER_TYPE\n            | DOUBLE_TYPE\n            | BOOLEAN_TYPE\n            | QUEUE_TYPE\n            | STRING_TYPE\n            | ENUM_TYPE\n            | VAR\n            | LIST_TYPE\n            | MAP_TYPE\n            | SET_TYPE\n            | DYNAMIC_TYPE\n      expression : value\n        |   expression op expression\n        |   LPAREN expression op expression RPAREN\n     op : arithmetic\n        |   comparation\n        |   logical\n     logical : LOGICAL_AND\n        |   LOGICAL_OR\n        |   LOGICAL_NOT\n     arithmetic : PLUS\n        |   MINUS\n        |   TIMES\n        |   DIVIDE\n    \n      comparation : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       values : value\n             | value COMMA values\n value : IDENTIFIER\n         | INTEGER\n         | DOUBLE\n         | STRING\n         | TRUE\n         | FALSE\n         | list\n  list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n    \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE statement RBRACE\n    \n      parameters : VOID\n                 | parameter\n                 | parameter COMMA parameters\n                 |\n      \n  parameter : type IDENTIFIER\n  '
    
_lr_action_items = {'$end':([0,1,2,3,4,5,6,7,11,14,15,16,17,18,19,60,63,64,75,88,91,92,96,100,103,104,108,110,111,],[-6,0,-1,-2,-3,-4,-5,-31,-52,-53,-54,-55,-56,-57,-58,-59,-32,-18,-60,-16,-19,-33,-10,-15,-9,-8,-7,-17,-61,]),'LPAREN':([0,8,12,13,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,56,58,59,65,66,70,80,81,93,101,105,],[8,8,58,59,8,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,71,8,8,8,8,8,8,8,8,8,8,]),'PRINT':([0,65,101,105,],[12,12,12,12,]),'IF':([0,52,65,101,105,],[13,13,13,13,13,]),'IDENTIFIER':([0,8,10,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,57,58,59,65,66,67,70,76,80,81,83,93,101,105,],[11,11,56,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,11,11,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,68,69,-11,11,11,11,11,79,11,11,11,11,97,11,11,11,]),'INTEGER':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[14,14,14,14,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,14,14,14,14,14,14,14,14,14,14,14,]),'DOUBLE':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[15,15,15,15,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,15,15,15,15,15,15,15,15,15,15,15,]),'STRING':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[16,16,16,16,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,16,16,16,16,16,16,16,16,16,16,16,]),'TRUE':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[17,17,17,17,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,17,17,17,17,17,17,17,17,17,17,17,]),'FALSE':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[18,18,18,18,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,18,18,18,18,18,18,18,18,18,18,18,]),'LATE':([0,65,101,105,],[20,20,20,20,]),'FINAL':([0,65,101,105,],[21,21,21,21,]),'CONST':([0,65,101,105,],[22,22,22,22,]),'INTEGER_TYPE':([0,9,20,21,22,65,71,99,101,105,],[23,23,-12,-13,-14,23,23,23,23,23,]),'DOUBLE_TYPE':([0,9,20,21,22,65,71,99,101,105,],[24,24,-12,-13,-14,24,24,24,24,24,]),'BOOLEAN_TYPE':([0,9,20,21,22,65,71,99,101,105,],[25,25,-12,-13,-14,25,25,25,25,25,]),'QUEUE_TYPE':([0,9,20,21,22,65,71,99,101,105,],[26,26,-12,-13,-14,26,26,26,26,26,]),'STRING_TYPE':([0,9,20,21,22,65,71,99,101,105,],[27,27,-12,-13,-14,27,27,27,27,27,]),'ENUM_TYPE':([0,9,20,21,22,65,71,99,101,105,],[28,28,-12,-13,-14,28,28,28,28,28,]),'VAR':([0,9,20,21,22,65,71,99,101,105,],[29,29,-12,-13,-14,29,29,29,29,29,]),'LIST_TYPE':([0,9,20,21,22,65,71,99,101,105,],[30,30,-12,-13,-14,30,30,30,30,30,]),'MAP_TYPE':([0,9,20,21,22,65,71,99,101,105,],[31,31,-12,-13,-14,31,31,31,31,31,]),'SET_TYPE':([0,9,20,21,22,65,71,99,101,105,],[32,32,-12,-13,-14,32,32,32,32,32,]),'DYNAMIC_TYPE':([0,9,20,21,22,65,71,99,101,105,],[33,33,-12,-13,-14,33,33,33,33,33,]),'LSQUARE':([0,8,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,58,59,65,66,70,76,80,81,93,101,105,],[34,34,34,34,-34,-35,-36,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-37,-38,-39,34,34,34,34,34,34,34,34,34,34,34,]),'RBRACE':([2,3,4,5,6,7,11,14,15,16,17,18,19,60,63,64,65,75,77,88,91,92,96,100,101,103,104,105,107,108,109,110,111,],[-1,-2,-3,-4,-5,-31,-52,-53,-54,-55,-56,-57,-58,-59,-32,-18,-6,-60,91,-16,-19,-33,-10,-15,-6,-9,-8,-6,110,-7,111,-17,-61,]),'PLUS':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[39,-31,-52,-53,-54,-55,-56,-57,-58,39,-59,39,39,39,-60,39,39,-33,39,39,39,]),'MINUS':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[40,-31,-52,-53,-54,-55,-56,-57,-58,40,-59,40,40,40,-60,40,40,-33,40,40,40,]),'TIMES':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[41,-31,-52,-53,-54,-55,-56,-57,-58,41,-59,41,41,41,-60,41,41,-33,41,41,41,]),'DIVIDE':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[42,-31,-52,-53,-54,-55,-56,-57,-58,42,-59,42,42,42,-60,42,42,-33,42,42,42,]),'EQUAL':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[43,-31,-52,-53,-54,-55,-56,-57,-58,43,-59,43,43,43,-60,43,43,-33,43,43,43,]),'NOT_EQUAL':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[44,-31,-52,-53,-54,-55,-56,-57,-58,44,-59,44,44,44,-60,44,44,-33,44,44,44,]),'LESS':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[45,-31,-52,-53,-54,-55,-56,-57,-58,45,-59,45,45,45,-60,45,45,-33,45,45,45,]),'LESS_EQUAL':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[46,-31,-52,-53,-54,-55,-56,-57,-58,46,-59,46,46,46,-60,46,46,-33,46,46,46,]),'GREATER':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[47,-31,-52,-53,-54,-55,-56,-57,-58,47,-59,47,47,47,-60,47,47,-33,47,47,47,]),'GREATER_EQUAL':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[48,-31,-52,-53,-54,-55,-56,-57,-58,48,-59,48,48,48,-60,48,48,-33,48,48,48,]),'LOGICAL_AND':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[49,-31,-52,-53,-54,-55,-56,-57,-58,49,-59,49,49,49,-60,49,49,-33,49,49,49,]),'LOGICAL_OR':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[50,-31,-52,-53,-54,-55,-56,-57,-58,50,-59,50,50,50,-60,50,50,-33,50,50,50,]),'LOGICAL_NOT':([2,7,11,14,15,16,17,18,19,53,60,63,72,74,75,78,82,92,94,95,102,],[51,-31,-52,-53,-54,-55,-56,-57,-58,51,-59,51,51,51,-60,51,51,-33,51,51,51,]),'ELSE':([6,64,91,110,],[52,52,-19,-17,]),'RPAREN':([7,11,14,15,16,17,18,19,58,60,63,71,72,74,75,78,84,85,86,92,97,99,106,],[-31,-52,-53,-54,-55,-56,-57,-58,73,-59,-32,-65,87,89,-60,92,98,-62,-63,-33,-66,-65,-64,]),'SEMICOLON':([7,11,14,15,16,17,18,19,60,63,73,75,82,87,92,94,95,102,],[-31,-52,-53,-54,-55,-56,-57,-58,-59,-32,88,-60,96,100,-33,103,104,108,]),'QUESTION_MARK':([10,23,24,25,26,27,28,29,30,31,32,33,54,],[57,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,57,]),'COMMA':([11,14,15,16,17,18,19,60,62,75,86,97,],[-52,-53,-54,-55,-56,-57,-58,-59,76,-60,99,-66,]),'RSQUARE':([11,14,15,16,17,18,19,34,60,61,62,75,90,],[-52,-53,-54,-55,-56,-57,-58,60,-59,75,-50,-60,-51,]),'LBRACE':([52,89,98,],[65,101,105,]),'ASSIGN':([56,68,69,79,],[70,80,81,93,]),'VOID':([71,99,],[85,85,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,65,101,105,],[1,77,107,109,]),'expression':([0,8,35,58,59,65,66,70,80,81,93,101,105,],[2,53,63,72,74,2,78,82,94,95,102,2,2,]),'assignment':([0,65,101,105,],[3,3,3,3,]),'print':([0,65,101,105,],[4,4,4,4,]),'function':([0,65,101,105,],[5,5,5,5,]),'if_statement':([0,52,65,101,105,],[6,64,6,6,6,]),'value':([0,8,34,35,58,59,65,66,70,76,80,81,93,101,105,],[7,7,62,7,7,7,7,7,7,62,7,7,7,7,7,]),'modifier':([0,65,101,105,],[9,9,9,9,]),'type':([0,9,65,71,99,101,105,],[10,54,10,83,83,10,10,]),'list':([0,8,34,35,58,59,65,66,70,76,80,81,93,101,105,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'op':([2,53,63,72,74,78,82,94,95,102,],[35,66,35,35,35,35,35,35,35,35,]),'arithmetic':([2,53,63,72,74,78,82,94,95,102,],[36,36,36,36,36,36,36,36,36,36,]),'comparation':([2,53,63,72,74,78,82,94,95,102,],[37,37,37,37,37,37,37,37,37,37,]),'logical':([2,53,63,72,74,78,82,94,95,102,],[38,38,38,38,38,38,38,38,38,38,]),'nullable':([10,54,],[55,67,]),'values':([34,76,],[61,90,]),'parameters':([71,99,],[84,106,]),'parameter':([71,99,],[86,86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> expression','statement',1,'p_statement','sintactico.py',6),
  ('statement -> assignment','statement',1,'p_statement','sintactico.py',7),
  ('statement -> print','statement',1,'p_statement','sintactico.py',8),
  ('statement -> function','statement',1,'p_statement','sintactico.py',9),
  ('statement -> if_statement','statement',1,'p_statement','sintactico.py',10),
  ('statement -> <empty>','statement',0,'p_statement','sintactico.py',11),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','sintactico.py',15),
  ('assignment -> type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',16),
  ('assignment -> modifier type IDENTIFIER ASSIGN expression SEMICOLON','assignment',6,'p_assignment','sintactico.py',17),
  ('assignment -> type IDENTIFIER ASSIGN expression SEMICOLON','assignment',5,'p_assignment','sintactico.py',18),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','sintactico.py',22),
  ('modifier -> LATE','modifier',1,'p_modifier','sintactico.py',26),
  ('modifier -> FINAL','modifier',1,'p_modifier','sintactico.py',27),
  ('modifier -> CONST','modifier',1,'p_modifier','sintactico.py',28),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','sintactico.py',32),
  ('print -> PRINT LPAREN RPAREN SEMICOLON','print',4,'p_print','sintactico.py',33),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE','if_statement',7,'p_if_statement','sintactico.py',38),
  ('if_statement -> if_statement ELSE if_statement','if_statement',3,'p_if_statement','sintactico.py',39),
  ('if_statement -> if_statement ELSE LBRACE statement RBRACE','if_statement',5,'p_if_statement','sintactico.py',40),
  ('type -> INTEGER_TYPE','type',1,'p_type','sintactico.py',44),
  ('type -> DOUBLE_TYPE','type',1,'p_type','sintactico.py',45),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','sintactico.py',46),
  ('type -> QUEUE_TYPE','type',1,'p_type','sintactico.py',47),
  ('type -> STRING_TYPE','type',1,'p_type','sintactico.py',48),
  ('type -> ENUM_TYPE','type',1,'p_type','sintactico.py',49),
  ('type -> VAR','type',1,'p_type','sintactico.py',50),
  ('type -> LIST_TYPE','type',1,'p_type','sintactico.py',51),
  ('type -> MAP_TYPE','type',1,'p_type','sintactico.py',52),
  ('type -> SET_TYPE','type',1,'p_type','sintactico.py',53),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','sintactico.py',54),
  ('expression -> value','expression',1,'p_expression','sintactico.py',58),
  ('expression -> expression op expression','expression',3,'p_expression','sintactico.py',59),
  ('expression -> LPAREN expression op expression RPAREN','expression',5,'p_expression','sintactico.py',60),
  ('op -> arithmetic','op',1,'p_op','sintactico.py',64),
  ('op -> comparation','op',1,'p_op','sintactico.py',65),
  ('op -> logical','op',1,'p_op','sintactico.py',66),
  ('logical -> LOGICAL_AND','logical',1,'p_logical','sintactico.py',70),
  ('logical -> LOGICAL_OR','logical',1,'p_logical','sintactico.py',71),
  ('logical -> LOGICAL_NOT','logical',1,'p_logical','sintactico.py',72),
  ('arithmetic -> PLUS','arithmetic',1,'p_arithmetic','sintactico.py',76),
  ('arithmetic -> MINUS','arithmetic',1,'p_arithmetic','sintactico.py',77),
  ('arithmetic -> TIMES','arithmetic',1,'p_arithmetic','sintactico.py',78),
  ('arithmetic -> DIVIDE','arithmetic',1,'p_arithmetic','sintactico.py',79),
  ('comparation -> EQUAL','comparation',1,'p_comparation','sintactico.py',84),
  ('comparation -> NOT_EQUAL','comparation',1,'p_comparation','sintactico.py',85),
  ('comparation -> LESS','comparation',1,'p_comparation','sintactico.py',86),
  ('comparation -> LESS_EQUAL','comparation',1,'p_comparation','sintactico.py',87),
  ('comparation -> GREATER','comparation',1,'p_comparation','sintactico.py',88),
  ('comparation -> GREATER_EQUAL','comparation',1,'p_comparation','sintactico.py',89),
  ('values -> value','values',1,'p_values','sintactico.py',94),
  ('values -> value COMMA values','values',3,'p_values','sintactico.py',95),
  ('value -> IDENTIFIER','value',1,'p_value','sintactico.py',99),
  ('value -> INTEGER','value',1,'p_value','sintactico.py',100),
  ('value -> DOUBLE','value',1,'p_value','sintactico.py',101),
  ('value -> STRING','value',1,'p_value','sintactico.py',102),
  ('value -> TRUE','value',1,'p_value','sintactico.py',103),
  ('value -> FALSE','value',1,'p_value','sintactico.py',104),
  ('value -> list','value',1,'p_value','sintactico.py',105),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','sintactico.py',109),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','sintactico.py',110),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE statement RBRACE','function',8,'p_function','sintactico.py',116),
  ('parameters -> VOID','parameters',1,'p_parameters','sintactico.py',121),
  ('parameters -> parameter','parameters',1,'p_parameters','sintactico.py',122),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','sintactico.py',123),
  ('parameters -> <empty>','parameters',0,'p_parameters','sintactico.py',124),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','sintactico.py',129),
]
