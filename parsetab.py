
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABSTRACT AS ASSERT ASSIGN ASYNC AWAIT BLOCKCOMMENT BOOLEAN_TYPE BREAK CASE CATCH COLON COMMA COMMENT CONST CONTINUE DEFAULT DEFERRED DIVIDE DO DOT DOUBLE DOUBLE_TYPE DYNAMIC_TYPE ELSE ENUM ENUM_TYPE EQUAL EXPORT EXTENDS EXTENSION EXTERNAL FALSE FINAL FINALLY FOR GET GREATER GREATER_EQUAL HIDE IDENTIFIER IF IMPLEMENTS IMPORT IN INTEGER INTEGER_TYPE INTERFACE IS KEYWORD LATE LBRACE LESS LESS_EQUAL LIBRARY LIST_TYPE LOGICAL_AND LOGICAL_NOT LOGICAL_OR LPAREN LSQUARE MAP_TYPE MINUS NOT_EQUAL NULL ON OPERATOR PART PLUS PRINT QUESTION_MARK QUEUE_TYPE RBRACE RETHROW RETURN RPAREN RSQUARE SEMICOLON SET SET_TYPE SHOW STATIC STRING STRING_TYPE SUPER SWITCH SYNC THROW TIMES TRUE TRY TYPEDEF VAR WHILE WITH YIELD\n statement : assignment\n           | print\n           | function\n           | if_statement\n  logical : LOGICAL_AND\n        |   LOGICAL_OR\n        |   LOGICAL_NOT\n     arithmetic : PLUS\n        |   MINUS\n        |   TIMES\n        |   DIVIDE\n    \n      comparation : EQUAL\n                 | NOT_EQUAL\n                 | LESS\n                 | LESS_EQUAL\n                 | GREATER\n                 | GREATER_EQUAL\n       op : arithmetic\n        |   comparation\n        |   logical\n      expression : value\n        |   expression op expression\n        |   LPAREN expression op expression RPAREN\n      assignment : modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON\n      print : PRINT LPAREN expression RPAREN SEMICOLON\n     list : LSQUARE RSQUARE\n            | LSQUARE values RSQUARE\n    \n     type : INTEGER_TYPE\n                | DOUBLE_TYPE\n                | BOOLEAN_TYPE\n                | QUEUE_TYPE\n                | STRING_TYPE\n                | ENUM_TYPE\n                | VAR\n                | LIST_TYPE\n                | MAP_TYPE\n                | SET_TYPE\n                | DYNAMIC_TYPE\n     modifier : LATE\n                | FINAL\n                | CONST\n                | \n     nullable : QUESTION_MARK\n                |\n    value : IDENTIFIER\n         | INTEGER\n         | DOUBLE\n         | STRING\n         | TRUE\n         | FALSE\n         | list\n  values : value\n             | value COMMA values\n \n  parameter : type IDENTIFIER\n  \n      parameters : parameter\n                 | parameter COMMA parameters\n                 |\n      \n    function : type IDENTIFIER LPAREN parameters RPAREN LBRACE statement RBRACE\n    \n    if_statement : IF LPAREN expression RPAREN LBRACE statement RBRACE\n                 | ELSE if_statement\n                 | if_statement ELSE LBRACE statement RBRACE\n    '
    
_lr_action_items = {'PRINT':([0,31,85,87,],[8,8,8,8,]),'IF':([0,10,31,85,87,],[9,9,9,9,9,]),'ELSE':([0,5,10,30,31,75,85,87,95,],[10,25,10,25,10,-61,10,10,-59,]),'LATE':([0,31,85,87,],[11,11,11,11,]),'FINAL':([0,31,85,87,],[12,12,12,12,]),'CONST':([0,31,85,87,],[13,13,13,13,]),'INTEGER_TYPE':([0,6,11,12,13,31,34,79,85,87,],[14,14,-39,-40,-41,14,14,14,14,14,]),'DOUBLE_TYPE':([0,6,11,12,13,31,34,79,85,87,],[15,15,-39,-40,-41,15,15,15,15,15,]),'BOOLEAN_TYPE':([0,6,11,12,13,31,34,79,85,87,],[16,16,-39,-40,-41,16,16,16,16,16,]),'QUEUE_TYPE':([0,6,11,12,13,31,34,79,85,87,],[17,17,-39,-40,-41,17,17,17,17,17,]),'STRING_TYPE':([0,6,11,12,13,31,34,79,85,87,],[18,18,-39,-40,-41,18,18,18,18,18,]),'ENUM_TYPE':([0,6,11,12,13,31,34,79,85,87,],[19,19,-39,-40,-41,19,19,19,19,19,]),'VAR':([0,6,11,12,13,31,34,79,85,87,],[20,20,-39,-40,-41,20,20,20,20,20,]),'LIST_TYPE':([0,6,11,12,13,31,34,79,85,87,],[21,21,-39,-40,-41,21,21,21,21,21,]),'MAP_TYPE':([0,6,11,12,13,31,34,79,85,87,],[22,22,-39,-40,-41,22,22,22,22,22,]),'SET_TYPE':([0,6,11,12,13,31,34,79,85,87,],[23,23,-39,-40,-41,23,23,23,23,23,]),'DYNAMIC_TYPE':([0,6,11,12,13,31,34,79,85,87,],[24,24,-39,-40,-41,24,24,24,24,24,]),'$end':([1,2,3,4,5,30,75,81,92,95,96,],[0,-1,-2,-3,-4,-60,-61,-25,-24,-59,-58,]),'RBRACE':([2,3,4,5,30,47,75,81,91,92,93,95,96,],[-1,-2,-3,-4,-60,75,-61,-25,95,-24,96,-59,-58,]),'IDENTIFIER':([7,14,15,16,17,18,19,20,21,22,23,24,26,28,29,32,33,35,45,49,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-44,38,38,48,-43,38,38,77,38,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,38,38,38,]),'LPAREN':([8,9,27,28,29,35,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,],[28,29,34,35,35,35,35,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,35,35,]),'QUESTION_MARK':([14,15,16,17,18,19,20,21,22,23,24,26,],[-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,33,]),'LBRACE':([25,74,78,],[31,85,87,]),'INTEGER':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[39,39,39,39,39,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,39,39,39,]),'DOUBLE':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[40,40,40,40,40,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,40,40,40,]),'STRING':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[41,41,41,41,41,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,41,41,41,]),'TRUE':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[42,42,42,42,42,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,42,42,42,]),'FALSE':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[43,43,43,43,43,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,43,43,43,]),'LSQUARE':([28,29,35,45,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,76,80,84,],[45,45,45,45,45,-18,-19,-20,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-5,-6,-7,45,45,45,]),'RPAREN':([34,36,37,38,39,40,41,42,43,44,46,50,51,71,77,79,82,83,88,89,94,],[-57,53,-21,-45,-46,-47,-48,-49,-50,-51,74,78,-55,-26,-54,-57,-22,-27,-56,94,-23,]),'PLUS':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[58,-21,-45,-46,-47,-48,-49,-50,-51,58,58,-26,58,-27,58,58,-23,]),'MINUS':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[59,-21,-45,-46,-47,-48,-49,-50,-51,59,59,-26,59,-27,59,59,-23,]),'TIMES':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[60,-21,-45,-46,-47,-48,-49,-50,-51,60,60,-26,60,-27,60,60,-23,]),'DIVIDE':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[61,-21,-45,-46,-47,-48,-49,-50,-51,61,61,-26,61,-27,61,61,-23,]),'EQUAL':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[62,-21,-45,-46,-47,-48,-49,-50,-51,62,62,-26,62,-27,62,62,-23,]),'NOT_EQUAL':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[63,-21,-45,-46,-47,-48,-49,-50,-51,63,63,-26,63,-27,63,63,-23,]),'LESS':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[64,-21,-45,-46,-47,-48,-49,-50,-51,64,64,-26,64,-27,64,64,-23,]),'LESS_EQUAL':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[65,-21,-45,-46,-47,-48,-49,-50,-51,65,65,-26,65,-27,65,65,-23,]),'GREATER':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[66,-21,-45,-46,-47,-48,-49,-50,-51,66,66,-26,66,-27,66,66,-23,]),'GREATER_EQUAL':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[67,-21,-45,-46,-47,-48,-49,-50,-51,67,67,-26,67,-27,67,67,-23,]),'LOGICAL_AND':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[68,-21,-45,-46,-47,-48,-49,-50,-51,68,68,-26,68,-27,68,68,-23,]),'LOGICAL_OR':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[69,-21,-45,-46,-47,-48,-49,-50,-51,69,69,-26,69,-27,69,69,-23,]),'LOGICAL_NOT':([36,37,38,39,40,41,42,43,44,46,52,71,82,83,86,89,94,],[70,-21,-45,-46,-47,-48,-49,-50,-51,70,70,-26,70,-27,70,70,-23,]),'SEMICOLON':([37,38,39,40,41,42,43,44,53,71,82,83,86,94,],[-21,-45,-46,-47,-48,-49,-50,-51,81,-26,-22,-27,92,-23,]),'COMMA':([38,39,40,41,42,43,44,51,71,73,77,83,],[-45,-46,-47,-48,-49,-50,-51,79,-26,84,-54,-27,]),'RSQUARE':([38,39,40,41,42,43,44,45,71,72,73,83,90,],[-45,-46,-47,-48,-49,-50,-51,71,-26,83,-52,-27,-53,]),'ASSIGN':([48,],[76,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,31,85,87,],[1,47,91,93,]),'assignment':([0,31,85,87,],[2,2,2,2,]),'print':([0,31,85,87,],[3,3,3,3,]),'function':([0,31,85,87,],[4,4,4,4,]),'if_statement':([0,10,31,85,87,],[5,30,5,5,5,]),'modifier':([0,31,85,87,],[6,6,6,6,]),'type':([0,6,31,34,79,85,87,],[7,26,7,49,49,7,7,]),'nullable':([26,],[32,]),'expression':([28,29,35,54,76,80,],[36,46,52,82,86,89,]),'value':([28,29,35,45,54,76,80,84,],[37,37,37,73,37,37,37,73,]),'list':([28,29,35,45,54,76,80,84,],[44,44,44,44,44,44,44,44,]),'parameters':([34,79,],[50,88,]),'parameter':([34,79,],[51,51,]),'op':([36,46,52,82,86,89,],[54,54,80,54,54,54,]),'arithmetic':([36,46,52,82,86,89,],[55,55,55,55,55,55,]),'comparation':([36,46,52,82,86,89,],[56,56,56,56,56,56,]),'logical':([36,46,52,82,86,89,],[57,57,57,57,57,57,]),'values':([45,84,],[72,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment','statement',1,'p_statement','main.py',6),
  ('statement -> print','statement',1,'p_statement','main.py',7),
  ('statement -> function','statement',1,'p_statement','main.py',8),
  ('statement -> if_statement','statement',1,'p_statement','main.py',9),
  ('logical -> LOGICAL_AND','logical',1,'p_logical','main.py',13),
  ('logical -> LOGICAL_OR','logical',1,'p_logical','main.py',14),
  ('logical -> LOGICAL_NOT','logical',1,'p_logical','main.py',15),
  ('arithmetic -> PLUS','arithmetic',1,'p_arithmetic','main.py',19),
  ('arithmetic -> MINUS','arithmetic',1,'p_arithmetic','main.py',20),
  ('arithmetic -> TIMES','arithmetic',1,'p_arithmetic','main.py',21),
  ('arithmetic -> DIVIDE','arithmetic',1,'p_arithmetic','main.py',22),
  ('comparation -> EQUAL','comparation',1,'p_comparation','main.py',27),
  ('comparation -> NOT_EQUAL','comparation',1,'p_comparation','main.py',28),
  ('comparation -> LESS','comparation',1,'p_comparation','main.py',29),
  ('comparation -> LESS_EQUAL','comparation',1,'p_comparation','main.py',30),
  ('comparation -> GREATER','comparation',1,'p_comparation','main.py',31),
  ('comparation -> GREATER_EQUAL','comparation',1,'p_comparation','main.py',32),
  ('op -> arithmetic','op',1,'p_op','main.py',36),
  ('op -> comparation','op',1,'p_op','main.py',37),
  ('op -> logical','op',1,'p_op','main.py',38),
  ('expression -> value','expression',1,'p_expression','main.py',42),
  ('expression -> expression op expression','expression',3,'p_expression','main.py',43),
  ('expression -> LPAREN expression op expression RPAREN','expression',5,'p_expression','main.py',44),
  ('assignment -> modifier type nullable IDENTIFIER ASSIGN expression SEMICOLON','assignment',7,'p_assignment','main.py',48),
  ('print -> PRINT LPAREN expression RPAREN SEMICOLON','print',5,'p_print','main.py',52),
  ('list -> LSQUARE RSQUARE','list',2,'p_list','main.py',56),
  ('list -> LSQUARE values RSQUARE','list',3,'p_list','main.py',57),
  ('type -> INTEGER_TYPE','type',1,'p_type','main.py',62),
  ('type -> DOUBLE_TYPE','type',1,'p_type','main.py',63),
  ('type -> BOOLEAN_TYPE','type',1,'p_type','main.py',64),
  ('type -> QUEUE_TYPE','type',1,'p_type','main.py',65),
  ('type -> STRING_TYPE','type',1,'p_type','main.py',66),
  ('type -> ENUM_TYPE','type',1,'p_type','main.py',67),
  ('type -> VAR','type',1,'p_type','main.py',68),
  ('type -> LIST_TYPE','type',1,'p_type','main.py',69),
  ('type -> MAP_TYPE','type',1,'p_type','main.py',70),
  ('type -> SET_TYPE','type',1,'p_type','main.py',71),
  ('type -> DYNAMIC_TYPE','type',1,'p_type','main.py',72),
  ('modifier -> LATE','modifier',1,'p_modifier','main.py',76),
  ('modifier -> FINAL','modifier',1,'p_modifier','main.py',77),
  ('modifier -> CONST','modifier',1,'p_modifier','main.py',78),
  ('modifier -> <empty>','modifier',0,'p_modifier','main.py',79),
  ('nullable -> QUESTION_MARK','nullable',1,'p_nullable','main.py',83),
  ('nullable -> <empty>','nullable',0,'p_nullable','main.py',84),
  ('value -> IDENTIFIER','value',1,'p_value','main.py',88),
  ('value -> INTEGER','value',1,'p_value','main.py',89),
  ('value -> DOUBLE','value',1,'p_value','main.py',90),
  ('value -> STRING','value',1,'p_value','main.py',91),
  ('value -> TRUE','value',1,'p_value','main.py',92),
  ('value -> FALSE','value',1,'p_value','main.py',93),
  ('value -> list','value',1,'p_value','main.py',94),
  ('values -> value','values',1,'p_values','main.py',98),
  ('values -> value COMMA values','values',3,'p_values','main.py',99),
  ('parameter -> type IDENTIFIER','parameter',2,'p_parameter','main.py',104),
  ('parameters -> parameter','parameters',1,'p_parameters','main.py',109),
  ('parameters -> parameter COMMA parameters','parameters',3,'p_parameters','main.py',110),
  ('parameters -> <empty>','parameters',0,'p_parameters','main.py',111),
  ('function -> type IDENTIFIER LPAREN parameters RPAREN LBRACE statement RBRACE','function',8,'p_function','main.py',116),
  ('if_statement -> IF LPAREN expression RPAREN LBRACE statement RBRACE','if_statement',7,'p_if_statement','main.py',121),
  ('if_statement -> ELSE if_statement','if_statement',2,'p_if_statement','main.py',122),
  ('if_statement -> if_statement ELSE LBRACE statement RBRACE','if_statement',5,'p_if_statement','main.py',123),
]
